
accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800677c  0800677c  0001677c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800686c  0800686c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800686c  0800686c  0001686c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006874  08006874  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006874  08006874  00016874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006878  08006878  00016878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800687c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  080068ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080068ec  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016695  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c9  00000000  00000000  00036735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00038d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00039f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e83  00000000  00000000  0003b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b70  00000000  00000000  00062edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5d4e  00000000  00000000  00077a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d799  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f8  00000000  00000000  0016d7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006764 	.word	0x08006764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006764 	.word	0x08006764

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <LSM6DSL_SET_IF_INC>:
/* USER CODE BEGIN 0 */


/* CONFIGURE SENSOR */
HAL_StatusTypeDef LSM6DSL_SET_IF_INC(LSM6DSL_IF_INC_t new_value)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af04      	add	r7, sp, #16
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	if ( HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_ADDRESS_READ, LSM6DSL_CTRL3_C, 1, &value, 1, 20) == HAL_ERROR )
 8000572:	2314      	movs	r3, #20
 8000574:	9302      	str	r3, [sp, #8]
 8000576:	2301      	movs	r3, #1
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	f107 030f 	add.w	r3, r7, #15
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2301      	movs	r3, #1
 8000582:	2212      	movs	r2, #18
 8000584:	21d5      	movs	r1, #213	; 0xd5
 8000586:	4814      	ldr	r0, [pc, #80]	; (80005d8 <LSM6DSL_SET_IF_INC+0x70>)
 8000588:	f001 fb88 	bl	8001c9c <HAL_I2C_Mem_Read>
 800058c:	4603      	mov	r3, r0
 800058e:	2b01      	cmp	r3, #1
 8000590:	d101      	bne.n	8000596 <LSM6DSL_SET_IF_INC+0x2e>
	{
		return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	e01c      	b.n	80005d0 <LSM6DSL_SET_IF_INC+0x68>
	}

	value &= ~LSM6DSL_IF_INC_MASK;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	f023 0304 	bic.w	r3, r3, #4
 800059c:	b2db      	uxtb	r3, r3
 800059e:	73fb      	strb	r3, [r7, #15]
	value |= new_value;
 80005a0:	7bfa      	ldrb	r2, [r7, #15]
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	73fb      	strb	r3, [r7, #15]

	if ( HAL_I2C_Mem_Write(&hi2c2, LSM6DSL_ADDRESS_WRITE, LSM6DSL_CTRL3_C, 1, &value, 1, 20) == HAL_ERROR )
 80005aa:	2314      	movs	r3, #20
 80005ac:	9302      	str	r3, [sp, #8]
 80005ae:	2301      	movs	r3, #1
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	f107 030f 	add.w	r3, r7, #15
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	2212      	movs	r2, #18
 80005bc:	21d4      	movs	r1, #212	; 0xd4
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <LSM6DSL_SET_IF_INC+0x70>)
 80005c0:	f001 fa58 	bl	8001a74 <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d101      	bne.n	80005ce <LSM6DSL_SET_IF_INC+0x66>
	{
		return HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
 80005cc:	e000      	b.n	80005d0 <LSM6DSL_SET_IF_INC+0x68>
	}

	return HAL_OK;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000098 	.word	0x20000098

080005dc <LSM6DSL_SET_BDU>:

HAL_StatusTypeDef LSM6DSL_SET_BDU(LSM6DSL_BDU_t new_value)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	if ( HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_ADDRESS_READ, LSM6DSL_CTRL3_C, 1, &value, 1, 20) == HAL_ERROR )
 80005e6:	2314      	movs	r3, #20
 80005e8:	9302      	str	r3, [sp, #8]
 80005ea:	2301      	movs	r3, #1
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	f107 030f 	add.w	r3, r7, #15
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2301      	movs	r3, #1
 80005f6:	2212      	movs	r2, #18
 80005f8:	21d5      	movs	r1, #213	; 0xd5
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <LSM6DSL_SET_BDU+0x70>)
 80005fc:	f001 fb4e 	bl	8001c9c <HAL_I2C_Mem_Read>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d101      	bne.n	800060a <LSM6DSL_SET_BDU+0x2e>
	{
		return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	e01c      	b.n	8000644 <LSM6DSL_SET_BDU+0x68>
	}

	value &= ~LSM6DSL_BDU_MASK;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000610:	b2db      	uxtb	r3, r3
 8000612:	73fb      	strb	r3, [r7, #15]
	value |= new_value;
 8000614:	7bfa      	ldrb	r2, [r7, #15]
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4313      	orrs	r3, r2
 800061a:	b2db      	uxtb	r3, r3
 800061c:	73fb      	strb	r3, [r7, #15]

	if ( HAL_I2C_Mem_Write(&hi2c2, LSM6DSL_ADDRESS_WRITE, LSM6DSL_CTRL3_C, 1, &value, 1, 20) == HAL_ERROR )
 800061e:	2314      	movs	r3, #20
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2301      	movs	r3, #1
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	f107 030f 	add.w	r3, r7, #15
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2301      	movs	r3, #1
 800062e:	2212      	movs	r2, #18
 8000630:	21d4      	movs	r1, #212	; 0xd4
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <LSM6DSL_SET_BDU+0x70>)
 8000634:	f001 fa1e 	bl	8001a74 <HAL_I2C_Mem_Write>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d101      	bne.n	8000642 <LSM6DSL_SET_BDU+0x66>
	{
		return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	e000      	b.n	8000644 <LSM6DSL_SET_BDU+0x68>
	}

	return HAL_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000098 	.word	0x20000098

08000650 <LSM6DSL_SET_FIFO_MODE>:

HAL_StatusTypeDef LSM6DSL_SET_FIFO_MODE(LSM6DSL_FIFO_MODE_t new_value)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af04      	add	r7, sp, #16
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	if ( HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_ADDRESS_READ, LSM6DSL_FIFO_CTRL5, 1, &value, 1, 20) == HAL_ERROR )
 800065a:	2314      	movs	r3, #20
 800065c:	9302      	str	r3, [sp, #8]
 800065e:	2301      	movs	r3, #1
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	f107 030f 	add.w	r3, r7, #15
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2301      	movs	r3, #1
 800066a:	220a      	movs	r2, #10
 800066c:	21d5      	movs	r1, #213	; 0xd5
 800066e:	4814      	ldr	r0, [pc, #80]	; (80006c0 <LSM6DSL_SET_FIFO_MODE+0x70>)
 8000670:	f001 fb14 	bl	8001c9c <HAL_I2C_Mem_Read>
 8000674:	4603      	mov	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	d101      	bne.n	800067e <LSM6DSL_SET_FIFO_MODE+0x2e>
	{
		return HAL_ERROR;
 800067a:	2301      	movs	r3, #1
 800067c:	e01c      	b.n	80006b8 <LSM6DSL_SET_FIFO_MODE+0x68>
	}

	value &= ~LSM6DSL_FIFO_MODE_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	f023 0307 	bic.w	r3, r3, #7
 8000684:	b2db      	uxtb	r3, r3
 8000686:	73fb      	strb	r3, [r7, #15]
	value |= new_value;
 8000688:	7bfa      	ldrb	r2, [r7, #15]
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4313      	orrs	r3, r2
 800068e:	b2db      	uxtb	r3, r3
 8000690:	73fb      	strb	r3, [r7, #15]

	if ( HAL_I2C_Mem_Write(&hi2c2, LSM6DSL_ADDRESS_WRITE, LSM6DSL_FIFO_CTRL5, 1, &value, 1, 20) == HAL_ERROR )
 8000692:	2314      	movs	r3, #20
 8000694:	9302      	str	r3, [sp, #8]
 8000696:	2301      	movs	r3, #1
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	f107 030f 	add.w	r3, r7, #15
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2301      	movs	r3, #1
 80006a2:	220a      	movs	r2, #10
 80006a4:	21d4      	movs	r1, #212	; 0xd4
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <LSM6DSL_SET_FIFO_MODE+0x70>)
 80006a8:	f001 f9e4 	bl	8001a74 <HAL_I2C_Mem_Write>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d101      	bne.n	80006b6 <LSM6DSL_SET_FIFO_MODE+0x66>
	{
		return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
 80006b4:	e000      	b.n	80006b8 <LSM6DSL_SET_FIFO_MODE+0x68>
	}

	return HAL_OK;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000098 	.word	0x20000098

080006c4 <LSM6DSL_SET_ODR_XL>:

HAL_StatusTypeDef LSM6DSL_SET_ODR_XL(LSM6DSL_ODR_XL_t new_value)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af04      	add	r7, sp, #16
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	if ( HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_ADDRESS_READ, LSM6DSL_CTRL1_XL, 1, &value, 1, 20) == HAL_ERROR )
 80006ce:	2314      	movs	r3, #20
 80006d0:	9302      	str	r3, [sp, #8]
 80006d2:	2301      	movs	r3, #1
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	f107 030f 	add.w	r3, r7, #15
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2301      	movs	r3, #1
 80006de:	2210      	movs	r2, #16
 80006e0:	21d5      	movs	r1, #213	; 0xd5
 80006e2:	4814      	ldr	r0, [pc, #80]	; (8000734 <LSM6DSL_SET_ODR_XL+0x70>)
 80006e4:	f001 fada 	bl	8001c9c <HAL_I2C_Mem_Read>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d101      	bne.n	80006f2 <LSM6DSL_SET_ODR_XL+0x2e>
	{
		return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e01c      	b.n	800072c <LSM6DSL_SET_ODR_XL+0x68>
	}

	value &= ~LSM6DSL_ODR_XL_MASK;
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	f003 030f 	and.w	r3, r3, #15
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	73fb      	strb	r3, [r7, #15]
	value |= new_value;
 80006fc:	7bfa      	ldrb	r2, [r7, #15]
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4313      	orrs	r3, r2
 8000702:	b2db      	uxtb	r3, r3
 8000704:	73fb      	strb	r3, [r7, #15]

	if ( HAL_I2C_Mem_Write(&hi2c2, LSM6DSL_ADDRESS_WRITE, LSM6DSL_CTRL1_XL, 1, &value, 1, 20) == HAL_ERROR )
 8000706:	2314      	movs	r3, #20
 8000708:	9302      	str	r3, [sp, #8]
 800070a:	2301      	movs	r3, #1
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	f107 030f 	add.w	r3, r7, #15
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	2210      	movs	r2, #16
 8000718:	21d4      	movs	r1, #212	; 0xd4
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <LSM6DSL_SET_ODR_XL+0x70>)
 800071c:	f001 f9aa 	bl	8001a74 <HAL_I2C_Mem_Write>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	d101      	bne.n	800072a <LSM6DSL_SET_ODR_XL+0x66>
	{
		return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e000      	b.n	800072c <LSM6DSL_SET_ODR_XL+0x68>
	}

	return HAL_OK;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000098 	.word	0x20000098

08000738 <LSM6DSL_SET_FS_XL>:

HAL_StatusTypeDef LSM6DSL_SET_FS_XL(LSM6DSL_FS_XL_t new_value)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af04      	add	r7, sp, #16
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	if ( HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_ADDRESS_READ, LSM6DSL_CTRL1_XL, 1, &value, 1, 20) == HAL_ERROR )
 8000742:	2314      	movs	r3, #20
 8000744:	9302      	str	r3, [sp, #8]
 8000746:	2301      	movs	r3, #1
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	f107 030f 	add.w	r3, r7, #15
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2301      	movs	r3, #1
 8000752:	2210      	movs	r2, #16
 8000754:	21d5      	movs	r1, #213	; 0xd5
 8000756:	4814      	ldr	r0, [pc, #80]	; (80007a8 <LSM6DSL_SET_FS_XL+0x70>)
 8000758:	f001 faa0 	bl	8001c9c <HAL_I2C_Mem_Read>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d101      	bne.n	8000766 <LSM6DSL_SET_FS_XL+0x2e>
	{
		return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e01c      	b.n	80007a0 <LSM6DSL_SET_FS_XL+0x68>
	}

	value &= ~LSM6DSL_FS_XL_MASK;
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	f023 030c 	bic.w	r3, r3, #12
 800076c:	b2db      	uxtb	r3, r3
 800076e:	73fb      	strb	r3, [r7, #15]
	value |= new_value;
 8000770:	7bfa      	ldrb	r2, [r7, #15]
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	4313      	orrs	r3, r2
 8000776:	b2db      	uxtb	r3, r3
 8000778:	73fb      	strb	r3, [r7, #15]

	if ( HAL_I2C_Mem_Write(&hi2c2, LSM6DSL_ADDRESS_WRITE, LSM6DSL_CTRL1_XL, 1, &value, 1, 20) == HAL_ERROR )
 800077a:	2314      	movs	r3, #20
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2301      	movs	r3, #1
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	f107 030f 	add.w	r3, r7, #15
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2301      	movs	r3, #1
 800078a:	2210      	movs	r2, #16
 800078c:	21d4      	movs	r1, #212	; 0xd4
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <LSM6DSL_SET_FS_XL+0x70>)
 8000790:	f001 f970 	bl	8001a74 <HAL_I2C_Mem_Write>
 8000794:	4603      	mov	r3, r0
 8000796:	2b01      	cmp	r3, #1
 8000798:	d101      	bne.n	800079e <LSM6DSL_SET_FS_XL+0x66>
	{
		return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e000      	b.n	80007a0 <LSM6DSL_SET_FS_XL+0x68>
	}

	return HAL_OK;
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000098 	.word	0x20000098

080007ac <LSM6DSL_SET_ODR_G>:

HAL_StatusTypeDef LSM6DSL_SET_ODR_G(LSM6DSL_ODR_G_t new_value)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af04      	add	r7, sp, #16
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	if ( HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_ADDRESS_READ, LSM6DSL_CTRL2_G, 1, &value, 1, 20) == HAL_ERROR )
 80007b6:	2314      	movs	r3, #20
 80007b8:	9302      	str	r3, [sp, #8]
 80007ba:	2301      	movs	r3, #1
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	f107 030f 	add.w	r3, r7, #15
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2301      	movs	r3, #1
 80007c6:	2211      	movs	r2, #17
 80007c8:	21d5      	movs	r1, #213	; 0xd5
 80007ca:	4814      	ldr	r0, [pc, #80]	; (800081c <LSM6DSL_SET_ODR_G+0x70>)
 80007cc:	f001 fa66 	bl	8001c9c <HAL_I2C_Mem_Read>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d101      	bne.n	80007da <LSM6DSL_SET_ODR_G+0x2e>
	{
		return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e01c      	b.n	8000814 <LSM6DSL_SET_ODR_G+0x68>
	}

	value &= ~LSM6DSL_ODR_G_MASK;
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	f003 030f 	and.w	r3, r3, #15
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	73fb      	strb	r3, [r7, #15]
	value |= new_value;
 80007e4:	7bfa      	ldrb	r2, [r7, #15]
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	73fb      	strb	r3, [r7, #15]

	if ( HAL_I2C_Mem_Write(&hi2c2, LSM6DSL_ADDRESS_WRITE, LSM6DSL_CTRL2_G, 1, &value, 1, 20) == HAL_ERROR )
 80007ee:	2314      	movs	r3, #20
 80007f0:	9302      	str	r3, [sp, #8]
 80007f2:	2301      	movs	r3, #1
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	f107 030f 	add.w	r3, r7, #15
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2301      	movs	r3, #1
 80007fe:	2211      	movs	r2, #17
 8000800:	21d4      	movs	r1, #212	; 0xd4
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <LSM6DSL_SET_ODR_G+0x70>)
 8000804:	f001 f936 	bl	8001a74 <HAL_I2C_Mem_Write>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d101      	bne.n	8000812 <LSM6DSL_SET_ODR_G+0x66>
	{
		return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e000      	b.n	8000814 <LSM6DSL_SET_ODR_G+0x68>
	}

	return HAL_OK;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000098 	.word	0x20000098

08000820 <LSM6DSL_SET_FS_125>:



HAL_StatusTypeDef LSM6DSL_SET_FS_125(LSM6DSL_FS_125_t new_value)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af04      	add	r7, sp, #16
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	if ( HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_ADDRESS_READ, LSM6DSL_CTRL2_G, 1, &value, 1, 20) == HAL_ERROR )
 800082a:	2314      	movs	r3, #20
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	2301      	movs	r3, #1
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	f107 030f 	add.w	r3, r7, #15
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	2211      	movs	r2, #17
 800083c:	21d5      	movs	r1, #213	; 0xd5
 800083e:	4814      	ldr	r0, [pc, #80]	; (8000890 <LSM6DSL_SET_FS_125+0x70>)
 8000840:	f001 fa2c 	bl	8001c9c <HAL_I2C_Mem_Read>
 8000844:	4603      	mov	r3, r0
 8000846:	2b01      	cmp	r3, #1
 8000848:	d101      	bne.n	800084e <LSM6DSL_SET_FS_125+0x2e>
	{
		return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e01c      	b.n	8000888 <LSM6DSL_SET_FS_125+0x68>
	}

	value &= ~LSM6DSL_FS_125_MASK;
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	f023 0302 	bic.w	r3, r3, #2
 8000854:	b2db      	uxtb	r3, r3
 8000856:	73fb      	strb	r3, [r7, #15]
	value |= new_value;
 8000858:	7bfa      	ldrb	r2, [r7, #15]
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4313      	orrs	r3, r2
 800085e:	b2db      	uxtb	r3, r3
 8000860:	73fb      	strb	r3, [r7, #15]

	if ( HAL_I2C_Mem_Write(&hi2c2, LSM6DSL_ADDRESS_WRITE, LSM6DSL_CTRL2_G, 1, &value, 1, 20) == HAL_ERROR )
 8000862:	2314      	movs	r3, #20
 8000864:	9302      	str	r3, [sp, #8]
 8000866:	2301      	movs	r3, #1
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	f107 030f 	add.w	r3, r7, #15
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2301      	movs	r3, #1
 8000872:	2211      	movs	r2, #17
 8000874:	21d4      	movs	r1, #212	; 0xd4
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <LSM6DSL_SET_FS_125+0x70>)
 8000878:	f001 f8fc 	bl	8001a74 <HAL_I2C_Mem_Write>
 800087c:	4603      	mov	r3, r0
 800087e:	2b01      	cmp	r3, #1
 8000880:	d101      	bne.n	8000886 <LSM6DSL_SET_FS_125+0x66>
	{
		return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e000      	b.n	8000888 <LSM6DSL_SET_FS_125+0x68>
	}

	return HAL_OK;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000098 	.word	0x20000098

08000894 <LSM6DSL_SET_FS_G>:

HAL_StatusTypeDef LSM6DSL_SET_FS_G(LSM6DSL_FS_G_t new_value)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af04      	add	r7, sp, #16
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	if ( HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_ADDRESS_READ, LSM6DSL_CTRL2_G, 1, &value, 1, 20) == HAL_ERROR )
 800089e:	2314      	movs	r3, #20
 80008a0:	9302      	str	r3, [sp, #8]
 80008a2:	2301      	movs	r3, #1
 80008a4:	9301      	str	r3, [sp, #4]
 80008a6:	f107 030f 	add.w	r3, r7, #15
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2301      	movs	r3, #1
 80008ae:	2211      	movs	r2, #17
 80008b0:	21d5      	movs	r1, #213	; 0xd5
 80008b2:	4814      	ldr	r0, [pc, #80]	; (8000904 <LSM6DSL_SET_FS_G+0x70>)
 80008b4:	f001 f9f2 	bl	8001c9c <HAL_I2C_Mem_Read>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d101      	bne.n	80008c2 <LSM6DSL_SET_FS_G+0x2e>
	{
		return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e01c      	b.n	80008fc <LSM6DSL_SET_FS_G+0x68>
	}

	value &= ~LSM6DSL_FS_G_MASK;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	f023 030c 	bic.w	r3, r3, #12
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	73fb      	strb	r3, [r7, #15]
	value |= new_value;
 80008cc:	7bfa      	ldrb	r2, [r7, #15]
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	73fb      	strb	r3, [r7, #15]

	if ( HAL_I2C_Mem_Write(&hi2c2, LSM6DSL_ADDRESS_WRITE, LSM6DSL_CTRL2_G, 1, &value, 1, 20) == HAL_ERROR )
 80008d6:	2314      	movs	r3, #20
 80008d8:	9302      	str	r3, [sp, #8]
 80008da:	2301      	movs	r3, #1
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	f107 030f 	add.w	r3, r7, #15
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2301      	movs	r3, #1
 80008e6:	2211      	movs	r2, #17
 80008e8:	21d4      	movs	r1, #212	; 0xd4
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <LSM6DSL_SET_FS_G+0x70>)
 80008ec:	f001 f8c2 	bl	8001a74 <HAL_I2C_Mem_Write>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d101      	bne.n	80008fa <LSM6DSL_SET_FS_G+0x66>
	{
		return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e000      	b.n	80008fc <LSM6DSL_SET_FS_G+0x68>
	}

	return HAL_OK;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000098 	.word	0x20000098

08000908 <LSM6DSL_GET_RAW_ACCELEROMETER>:


HAL_StatusTypeDef LSM6DSL_GET_RAW_ACCELEROMETER(uint8_t *buff)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af04      	add	r7, sp, #16
 800090e:	6078      	str	r0, [r7, #4]
	int offset = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < 3; i++) {
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	e025      	b.n	8000966 <LSM6DSL_GET_RAW_ACCELEROMETER+0x5e>
		for (int j = 0; j < 2; j++) {
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	e01c      	b.n	800095a <LSM6DSL_GET_RAW_ACCELEROMETER+0x52>
			if ( HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_ADDRESS_READ, LSM6DSL_OUTX_L_XL + offset, 1, &buff[offset], 1, 20) == HAL_ERROR)
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	b29b      	uxth	r3, r3
 8000924:	3328      	adds	r3, #40	; 0x28
 8000926:	b299      	uxth	r1, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	2214      	movs	r2, #20
 8000930:	9202      	str	r2, [sp, #8]
 8000932:	2201      	movs	r2, #1
 8000934:	9201      	str	r2, [sp, #4]
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	2301      	movs	r3, #1
 800093a:	460a      	mov	r2, r1
 800093c:	21d5      	movs	r1, #213	; 0xd5
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <LSM6DSL_GET_RAW_ACCELEROMETER+0x70>)
 8000940:	f001 f9ac 	bl	8001c9c <HAL_I2C_Mem_Read>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d101      	bne.n	800094e <LSM6DSL_GET_RAW_ACCELEROMETER+0x46>
			{
				return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e00f      	b.n	800096e <LSM6DSL_GET_RAW_ACCELEROMETER+0x66>
			}
			offset++;
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	3301      	adds	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < 2; j++) {
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	3301      	adds	r3, #1
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2b01      	cmp	r3, #1
 800095e:	dddf      	ble.n	8000920 <LSM6DSL_GET_RAW_ACCELEROMETER+0x18>
	for (int i = 0; i < 3; i++) {
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	3301      	adds	r3, #1
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	2b02      	cmp	r3, #2
 800096a:	ddd6      	ble.n	800091a <LSM6DSL_GET_RAW_ACCELEROMETER+0x12>
		}
	}

	return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000098 	.word	0x20000098

0800097c <CONFIGURE_I2C_SENSOR>:



HAL_StatusTypeDef CONFIGURE_I2C_SENSOR()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	/* Enable register address automatically increasing */
	if ( LSM6DSL_SET_IF_INC(LSM6DSL_IF_INC_ENABLED) == HAL_ERROR)
 8000980:	2004      	movs	r0, #4
 8000982:	f7ff fdf1 	bl	8000568 <LSM6DSL_SET_IF_INC>
 8000986:	4603      	mov	r3, r0
 8000988:	2b01      	cmp	r3, #1
 800098a:	d101      	bne.n	8000990 <CONFIGURE_I2C_SENSOR+0x14>
	{
		return HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	e038      	b.n	8000a02 <CONFIGURE_I2C_SENSOR+0x86>
	}

	/* Enable BDU */
	if ( LSM6DSL_SET_BDU(LSM6DSL_BDU_ENABLED) == HAL_ERROR )
 8000990:	2040      	movs	r0, #64	; 0x40
 8000992:	f7ff fe23 	bl	80005dc <LSM6DSL_SET_BDU>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d101      	bne.n	80009a0 <CONFIGURE_I2C_SENSOR+0x24>
	{
		return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e030      	b.n	8000a02 <CONFIGURE_I2C_SENSOR+0x86>
	}

	/* SET FIFO MODE to BYPASS */
	if ( LSM6DSL_SET_FIFO_MODE(LSM6DSL_FIFO_MODE_BYPASS) == HAL_ERROR )
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff fe55 	bl	8000650 <LSM6DSL_SET_FIFO_MODE>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d101      	bne.n	80009b0 <CONFIGURE_I2C_SENSOR+0x34>
	{
		return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e028      	b.n	8000a02 <CONFIGURE_I2C_SENSOR+0x86>
	}

	if ( LSM6DSL_SET_FS_XL(LSM6DSL_FS_XL_2g) == HAL_ERROR )
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fec1 	bl	8000738 <LSM6DSL_SET_FS_XL>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d101      	bne.n	80009c0 <CONFIGURE_I2C_SENSOR+0x44>
	{
		return HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	e020      	b.n	8000a02 <CONFIGURE_I2C_SENSOR+0x86>
	}

	if ( LSM6DSL_SET_ODR_G(LSM6DSL_ODR_G_POWER_DOWN) == HAL_ERROR )
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff fef3 	bl	80007ac <LSM6DSL_SET_ODR_G>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d101      	bne.n	80009d0 <CONFIGURE_I2C_SENSOR+0x54>
	{
		return HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	e018      	b.n	8000a02 <CONFIGURE_I2C_SENSOR+0x86>
	}

	if ( LSM6DSL_SET_FS_125(LSM6DSL_FS_125_DISABLED) == HAL_ERROR )
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ff25 	bl	8000820 <LSM6DSL_SET_FS_125>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d101      	bne.n	80009e0 <CONFIGURE_I2C_SENSOR+0x64>
	{
		return HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	e010      	b.n	8000a02 <CONFIGURE_I2C_SENSOR+0x86>
	}

	if ( LSM6DSL_SET_FS_G(LSM6DSL_FS_G_2000dps) == HAL_ERROR )
 80009e0:	200c      	movs	r0, #12
 80009e2:	f7ff ff57 	bl	8000894 <LSM6DSL_SET_FS_G>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d101      	bne.n	80009f0 <CONFIGURE_I2C_SENSOR+0x74>
	{
		return HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e008      	b.n	8000a02 <CONFIGURE_I2C_SENSOR+0x86>
	}

	if ( LSM6DSL_SET_ODR_XL(LSM6DSL_ODR_XL_104Hz) == HAL_ERROR )
 80009f0:	2040      	movs	r0, #64	; 0x40
 80009f2:	f7ff fe67 	bl	80006c4 <LSM6DSL_SET_ODR_XL>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d101      	bne.n	8000a00 <CONFIGURE_I2C_SENSOR+0x84>
	{
		return HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <CONFIGURE_I2C_SENSOR+0x86>
	}

	return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <READ_ACCELEROMETER>:


HAL_StatusTypeDef READ_ACCELEROMETER(int32_t *pData)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	 uint8_t dataRaw[6];

	 if ( LSM6DSL_GET_RAW_ACCELEROMETER(dataRaw) == HAL_ERROR )
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff77 	bl	8000908 <LSM6DSL_GET_RAW_ACCELEROMETER>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d101      	bne.n	8000a24 <READ_ACCELEROMETER+0x1c>
	 {
		 return HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e03a      	b.n	8000a9a <READ_ACCELEROMETER+0x92>
	 }

	 float sensitivity = LSM6DSL_ACC_SENSITIVITY_FOR_FS_2G;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <READ_ACCELEROMETER+0x9c>)
 8000a26:	617b      	str	r3, [r7, #20]

	 pData[0] = (int32_t)( ( (( (int16_t)dataRaw[1] ) << 8) | (int16_t)dataRaw[0] ) * sensitivity);
 8000a28:	7b7b      	ldrb	r3, [r7, #13]
 8000a2a:	021b      	lsls	r3, r3, #8
 8000a2c:	7b3a      	ldrb	r2, [r7, #12]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a38:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a44:	ee17 2a90 	vmov	r2, s15
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	601a      	str	r2, [r3, #0]
	 pData[1] = (int32_t)(( ( ((int16_t)dataRaw[3] ) << 8) | (int16_t)dataRaw[2] ) * sensitivity);
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	7bba      	ldrb	r2, [r7, #14]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	ee07 3a90 	vmov	s15, r3
 8000a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3304      	adds	r3, #4
 8000a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a6c:	ee17 2a90 	vmov	r2, s15
 8000a70:	601a      	str	r2, [r3, #0]
	 pData[2] = (int32_t)(( (((int16_t)dataRaw[5] ) << 8) | (int16_t)dataRaw[4] ) * sensitivity);
 8000a72:	7c7b      	ldrb	r3, [r7, #17]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	7c3a      	ldrb	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3308      	adds	r3, #8
 8000a8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a92:	ee17 2a90 	vmov	r2, s15
 8000a96:	601a      	str	r2, [r3, #0]

	 return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	3d79db23 	.word	0x3d79db23

08000aa8 <_write>:

int _write(int fd, char* ptr, int len) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <_write+0x28>)
 8000ac0:	f004 f9fa 	bl	8004eb8 <HAL_UART_Transmit>
    return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000e4 	.word	0x200000e4

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b0c6      	sub	sp, #280	; 0x118
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ada:	f000 fc04 	bl	80012e6 <HAL_Init>

  /* USER CODE BEGIN Init */
	 uint8_t slave_array[256];
	 memset(slave_array, 0, 265);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	f240 1209 	movw	r2, #265	; 0x109
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 fedd 	bl	80058a8 <memset>
	 uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4a2f      	ldr	r2, [pc, #188]	; (8000bb0 <main+0xdc>)
 8000af4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af8:	6018      	str	r0, [r3, #0]
 8000afa:	3304      	adds	r3, #4
 8000afc:	8019      	strh	r1, [r3, #0]
	 int32_t data[3];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afe:	f000 f863 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b02:	f000 f98b 	bl	8000e1c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b06:	f000 f8e3 	bl	8000cd0 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000b0a:	f000 f8a3 	bl	8000c54 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000b0e:	f000 f955 	bl	8000dbc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b12:	2100      	movs	r1, #0
 8000b14:	4827      	ldr	r0, [pc, #156]	; (8000bb4 <main+0xe0>)
 8000b16:	f003 f9e5 	bl	8003ee4 <HAL_TIM_PWM_Start>

  for (int i = 0; i < 255; i++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000b20:	e01c      	b.n	8000b5c <main+0x88>
	  slave_array[i] = HAL_I2C_IsDeviceReady(&hi2c2, i<<1, 1, 10) == HAL_OK;
 8000b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	b299      	uxth	r1, r3
 8000b2c:	230a      	movs	r3, #10
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4821      	ldr	r0, [pc, #132]	; (8000bb8 <main+0xe4>)
 8000b32:	f001 f9cd 	bl	8001ed0 <HAL_I2C_IsDeviceReady>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	bf0c      	ite	eq
 8000b3c:	2301      	moveq	r3, #1
 8000b3e:	2300      	movne	r3, #0
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4619      	mov	r1, r3
 8000b44:	f107 0214 	add.w	r2, r7, #20
 8000b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b4c:	4413      	add	r3, r2
 8000b4e:	460a      	mov	r2, r1
 8000b50:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 255; i++) {
 8000b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b56:	3301      	adds	r3, #1
 8000b58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b60:	2bfe      	cmp	r3, #254	; 0xfe
 8000b62:	ddde      	ble.n	8000b22 <main+0x4e>
  }

  if (HAL_I2C_IsDeviceReady(&hi2c2, LSM6DSL_ADDRESS, 1, 10) == HAL_OK) {
 8000b64:	230a      	movs	r3, #10
 8000b66:	2201      	movs	r2, #1
 8000b68:	21d4      	movs	r1, #212	; 0xd4
 8000b6a:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <main+0xe4>)
 8000b6c:	f001 f9b0 	bl	8001ed0 <HAL_I2C_IsDeviceReady>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d104      	bne.n	8000b80 <main+0xac>
	 HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000b76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b7a:	4810      	ldr	r0, [pc, #64]	; (8000bbc <main+0xe8>)
 8000b7c:	f000 fed0 	bl	8001920 <HAL_GPIO_TogglePin>
  }
  CONFIGURE_I2C_SENSOR();
 8000b80:	f7ff fefc 	bl	800097c <CONFIGURE_I2C_SENSOR>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 READ_ACCELEROMETER(data);
 8000b84:	463b      	mov	r3, r7
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff3e 	bl	8000a08 <READ_ACCELEROMETER>
	 printf("%ld\r\n", data[0]);
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <main+0xec>)
 8000b94:	f004 fe90 	bl	80058b8 <iprintf>

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, data[0] / 10);
 8000b98:	463b      	mov	r3, r7
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <main+0xf0>)
 8000b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba2:	1092      	asrs	r2, r2, #2
 8000ba4:	17db      	asrs	r3, r3, #31
 8000ba6:	1ad2      	subs	r2, r2, r3
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <main+0xe0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	635a      	str	r2, [r3, #52]	; 0x34
	 READ_ACCELEROMETER(data);
 8000bae:	e7e9      	b.n	8000b84 <main+0xb0>
 8000bb0:	08006784 	.word	0x08006784
 8000bb4:	20000168 	.word	0x20000168
 8000bb8:	20000098 	.word	0x20000098
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	0800677c 	.word	0x0800677c
 8000bc4:	66666667 	.word	0x66666667

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b096      	sub	sp, #88	; 0x58
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2244      	movs	r2, #68	; 0x44
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f004 fe66 	bl	80058a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bee:	f001 fdc3 	bl	8002778 <HAL_PWREx_ControlVoltageScaling>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bf8:	f000 f950 	bl	8000e9c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c08:	2360      	movs	r3, #96	; 0x60
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fe05 	bl	8002824 <HAL_RCC_OscConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000c20:	f000 f93c 	bl	8000e9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c24:	230f      	movs	r3, #15
 8000c26:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f002 f9d7 	bl	8002ff0 <HAL_RCC_ClockConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c48:	f000 f928 	bl	8000e9c <Error_Handler>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3758      	adds	r7, #88	; 0x58
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <MX_I2C2_Init+0x78>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c60:	f640 6214 	movw	r2, #3604	; 0xe14
 8000c64:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c92:	f000 fe5f 	bl	8001954 <HAL_I2C_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c9c:	f000 f8fe 	bl	8000e9c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000ca4:	f001 fcc2 	bl	800262c <HAL_I2CEx_ConfigAnalogFilter>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000cae:	f000 f8f5 	bl	8000e9c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000cb6:	f001 fd04 	bl	80026c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000cc0:	f000 f8ec 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000098 	.word	0x20000098
 8000ccc:	40005800 	.word	0x40005800

08000cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	; 0x38
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	615a      	str	r2, [r3, #20]
 8000d00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <MX_TIM2_Init+0xe8>)
 8000d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000d0a:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <MX_TIM2_Init+0xe8>)
 8000d0c:	227f      	movs	r2, #127	; 0x7f
 8000d0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <MX_TIM2_Init+0xe8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8000d16:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <MX_TIM2_Init+0xe8>)
 8000d18:	f240 2271 	movw	r2, #625	; 0x271
 8000d1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <MX_TIM2_Init+0xe8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <MX_TIM2_Init+0xe8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d2a:	4823      	ldr	r0, [pc, #140]	; (8000db8 <MX_TIM2_Init+0xe8>)
 8000d2c:	f003 f822 	bl	8003d74 <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d36:	f000 f8b1 	bl	8000e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d44:	4619      	mov	r1, r3
 8000d46:	481c      	ldr	r0, [pc, #112]	; (8000db8 <MX_TIM2_Init+0xe8>)
 8000d48:	f003 fae6 	bl	8004318 <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d52:	f000 f8a3 	bl	8000e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d56:	4818      	ldr	r0, [pc, #96]	; (8000db8 <MX_TIM2_Init+0xe8>)
 8000d58:	f003 f863 	bl	8003e22 <HAL_TIM_PWM_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d62:	f000 f89b 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4810      	ldr	r0, [pc, #64]	; (8000db8 <MX_TIM2_Init+0xe8>)
 8000d76:	f003 ffc9 	bl	8004d0c <HAL_TIMEx_MasterConfigSynchronization>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d80:	f000 f88c 	bl	8000e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d84:	2360      	movs	r3, #96	; 0x60
 8000d86:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d94:	463b      	mov	r3, r7
 8000d96:	2200      	movs	r2, #0
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4807      	ldr	r0, [pc, #28]	; (8000db8 <MX_TIM2_Init+0xe8>)
 8000d9c:	f003 f9a8 	bl	80040f0 <HAL_TIM_PWM_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000da6:	f000 f879 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000daa:	4803      	ldr	r0, [pc, #12]	; (8000db8 <MX_TIM2_Init+0xe8>)
 8000dac:	f000 f91c 	bl	8000fe8 <HAL_TIM_MspPostInit>

}
 8000db0:	bf00      	nop
 8000db2:	3738      	adds	r7, #56	; 0x38
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000168 	.word	0x20000168

08000dbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_USART1_UART_Init+0x58>)
 8000dc2:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <MX_USART1_UART_Init+0x5c>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_USART1_UART_Init+0x58>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_USART1_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_USART1_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_USART1_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_USART1_UART_Init+0x58>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_USART1_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_USART1_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_USART1_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_USART1_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_USART1_UART_Init+0x58>)
 8000e00:	f004 f80c 	bl	8004e1c <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e0a:	f000 f847 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000e4 	.word	0x200000e4
 8000e18:	40013800 	.word	0x40013800

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_GPIO_Init+0x78>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <MX_GPIO_Init+0x78>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_GPIO_Init+0x78>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_GPIO_Init+0x78>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <MX_GPIO_Init+0x78>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_GPIO_Init+0x78>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <MX_GPIO_Init+0x7c>)
 8000e6a:	f000 fd41 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000e6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_GPIO_Init+0x7c>)
 8000e88:	f000 fb88 	bl	800159c <HAL_GPIO_Init>

}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000400 	.word	0x48000400

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>
	...

08000ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_MspInit+0x44>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <HAL_MspInit+0x44>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <HAL_MspInit+0x44>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_MspInit+0x44>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_MspInit+0x44>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_MspInit+0x44>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000

08000ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ac      	sub	sp, #176	; 0xb0
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2288      	movs	r2, #136	; 0x88
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f004 fcc9 	bl	80058a8 <memset>
  if(hi2c->Instance==I2C2)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <HAL_I2C_MspInit+0xb0>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d13b      	bne.n	8000f98 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 fa65 	bl	80033fc <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f38:	f7ff ffb0 	bl	8000e9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_I2C_MspInit+0xb4>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f40:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <HAL_I2C_MspInit+0xb4>)
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <HAL_I2C_MspInit+0xb4>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5c:	2312      	movs	r3, #18
 8000f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <HAL_I2C_MspInit+0xb8>)
 8000f7c:	f000 fb0e 	bl	800159c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <HAL_I2C_MspInit+0xb4>)
 8000f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_I2C_MspInit+0xb4>)
 8000f86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_I2C_MspInit+0xb4>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f98:	bf00      	nop
 8000f9a:	37b0      	adds	r7, #176	; 0xb0
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40005800 	.word	0x40005800
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48000400 	.word	0x48000400

08000fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_TIM_Base_MspInit+0x38>)
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_TIM_Base_MspInit+0x38>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_TIM_Base_MspInit+0x38>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001008:	d11c      	bne.n	8001044 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_TIM_MspPostInit+0x64>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a0f      	ldr	r2, [pc, #60]	; (800104c <HAL_TIM_MspPostInit+0x64>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_TIM_MspPostInit+0x64>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001022:	2320      	movs	r3, #32
 8001024:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001032:	2301      	movs	r3, #1
 8001034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001040:	f000 faac 	bl	800159c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0ac      	sub	sp, #176	; 0xb0
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2288      	movs	r2, #136	; 0x88
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f004 fc19 	bl	80058a8 <memset>
  if(huart->Instance==USART1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a21      	ldr	r2, [pc, #132]	; (8001100 <HAL_UART_MspInit+0xb0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d13a      	bne.n	80010f6 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001080:	2301      	movs	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001084:	2300      	movs	r3, #0
 8001086:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4618      	mov	r0, r3
 800108e:	f002 f9b5 	bl	80033fc <HAL_RCCEx_PeriphCLKConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001098:	f7ff ff00 	bl	8000e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <HAL_UART_MspInit+0xb4>)
 800109e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a0:	4a18      	ldr	r2, [pc, #96]	; (8001104 <HAL_UART_MspInit+0xb4>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a6:	6613      	str	r3, [r2, #96]	; 0x60
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_UART_MspInit+0xb4>)
 80010aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <HAL_UART_MspInit+0xb4>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	4a12      	ldr	r2, [pc, #72]	; (8001104 <HAL_UART_MspInit+0xb4>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_UART_MspInit+0xb4>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010cc:	23c0      	movs	r3, #192	; 0xc0
 80010ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010e4:	2307      	movs	r3, #7
 80010e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <HAL_UART_MspInit+0xb8>)
 80010f2:	f000 fa53 	bl	800159c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	37b0      	adds	r7, #176	; 0xb0
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40013800 	.word	0x40013800
 8001104:	40021000 	.word	0x40021000
 8001108:	48000400 	.word	0x48000400

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 f91a 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e00a      	b.n	8001188 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001172:	f3af 8000 	nop.w
 8001176:	4601      	mov	r1, r0
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60ba      	str	r2, [r7, #8]
 800117e:	b2ca      	uxtb	r2, r1
 8001180:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3301      	adds	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	dbf0      	blt.n	8001172 <_read+0x12>
	}

return len;
 8001190:	687b      	ldr	r3, [r7, #4]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_close>:
	}
	return len;
}

int _close(int file)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
	return -1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c2:	605a      	str	r2, [r3, #4]
	return 0;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <_isatty>:

int _isatty(int file)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
	return 1;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
	return 0;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <_sbrk+0x5c>)
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <_sbrk+0x60>)
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <_sbrk+0x64>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <_sbrk+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	429a      	cmp	r2, r3
 8001232:	d207      	bcs.n	8001244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001234:	f004 fb0e 	bl	8005854 <__errno>
 8001238:	4603      	mov	r3, r0
 800123a:	220c      	movs	r2, #12
 800123c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001242:	e009      	b.n	8001258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <_sbrk+0x64>)
 8001254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20018000 	.word	0x20018000
 8001264:	00000400 	.word	0x00000400
 8001268:	2000008c 	.word	0x2000008c
 800126c:	200001c8 	.word	0x200001c8

08001270 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <SystemInit+0x20>)
 8001276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <SystemInit+0x20>)
 800127c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001298:	f7ff ffea 	bl	8001270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800129e:	490d      	ldr	r1, [pc, #52]	; (80012d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <LoopForever+0xe>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b4:	4c0a      	ldr	r4, [pc, #40]	; (80012e0 <LoopForever+0x16>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c2:	f004 facd 	bl	8005860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012c6:	f7ff fc05 	bl	8000ad4 <main>

080012ca <LoopForever>:

LoopForever:
    b LoopForever
 80012ca:	e7fe      	b.n	80012ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012d8:	0800687c 	.word	0x0800687c
  ldr r2, =_sbss
 80012dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012e0:	200001c8 	.word	0x200001c8

080012e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_2_IRQHandler>

080012e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f91f 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f6:	200f      	movs	r0, #15
 80012f8:	f000 f80e 	bl	8001318 <HAL_InitTick>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	e001      	b.n	800130c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001308:	f7ff fdce 	bl	8000ea8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800130c:	79fb      	ldrb	r3, [r7, #7]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_InitTick+0x6c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d023      	beq.n	8001374 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_InitTick+0x70>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <HAL_InitTick+0x6c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f91d 	bl	8001582 <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d809      	bhi.n	8001368 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800135c:	f000 f8f5 	bl	800154a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <HAL_InitTick+0x74>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e007      	b.n	8001378 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e004      	b.n	8001378 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	73fb      	strb	r3, [r7, #15]
 8001372:	e001      	b.n	8001378 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008
 8001388:	20000000 	.word	0x20000000
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008
 80013b4:	200001b4 	.word	0x200001b4

080013b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200001b4 	.word	0x200001b4

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff47 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff5c 	bl	8001418 <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff8e 	bl	8001488 <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5d 	bl	8001434 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffb0 	bl	80014f0 <SysTick_Config>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015aa:	e17f      	b.n	80018ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8171 	beq.w	80018a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d005      	beq.n	80015dc <HAL_GPIO_Init+0x40>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d130      	bne.n	800163e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001612:	2201      	movs	r2, #1
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	f003 0201 	and.w	r2, r3, #1
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b03      	cmp	r3, #3
 8001648:	d118      	bne.n	800167c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001650:	2201      	movs	r2, #1
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	f003 0201 	and.w	r2, r3, #1
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b03      	cmp	r3, #3
 8001686:	d017      	beq.n	80016b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d123      	bne.n	800170c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	08da      	lsrs	r2, r3, #3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3208      	adds	r2, #8
 80016cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	220f      	movs	r2, #15
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	08da      	lsrs	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3208      	adds	r2, #8
 8001706:	6939      	ldr	r1, [r7, #16]
 8001708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0203 	and.w	r2, r3, #3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80ac 	beq.w	80018a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b5f      	ldr	r3, [pc, #380]	; (80018cc <HAL_GPIO_Init+0x330>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	4a5e      	ldr	r2, [pc, #376]	; (80018cc <HAL_GPIO_Init+0x330>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6613      	str	r3, [r2, #96]	; 0x60
 800175a:	4b5c      	ldr	r3, [pc, #368]	; (80018cc <HAL_GPIO_Init+0x330>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001766:	4a5a      	ldr	r2, [pc, #360]	; (80018d0 <HAL_GPIO_Init+0x334>)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001790:	d025      	beq.n	80017de <HAL_GPIO_Init+0x242>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4f      	ldr	r2, [pc, #316]	; (80018d4 <HAL_GPIO_Init+0x338>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_GPIO_Init+0x23e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4e      	ldr	r2, [pc, #312]	; (80018d8 <HAL_GPIO_Init+0x33c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x23a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4d      	ldr	r2, [pc, #308]	; (80018dc <HAL_GPIO_Init+0x340>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x236>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4c      	ldr	r2, [pc, #304]	; (80018e0 <HAL_GPIO_Init+0x344>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x232>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4b      	ldr	r2, [pc, #300]	; (80018e4 <HAL_GPIO_Init+0x348>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x22e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4a      	ldr	r2, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x34c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x22a>
 80017c2:	2306      	movs	r3, #6
 80017c4:	e00c      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e00a      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017ca:	2305      	movs	r3, #5
 80017cc:	e008      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017ce:	2304      	movs	r3, #4
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017de:	2300      	movs	r3, #0
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	f002 0203 	and.w	r2, r2, #3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017f0:	4937      	ldr	r1, [pc, #220]	; (80018d0 <HAL_GPIO_Init+0x334>)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017fe:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <HAL_GPIO_Init+0x350>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001822:	4a32      	ldr	r2, [pc, #200]	; (80018ec <HAL_GPIO_Init+0x350>)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001828:	4b30      	ldr	r3, [pc, #192]	; (80018ec <HAL_GPIO_Init+0x350>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800184c:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_GPIO_Init+0x350>)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <HAL_GPIO_Init+0x350>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <HAL_GPIO_Init+0x350>)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_GPIO_Init+0x350>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018a0:	4a12      	ldr	r2, [pc, #72]	; (80018ec <HAL_GPIO_Init+0x350>)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f47f ae78 	bne.w	80015ac <HAL_GPIO_Init+0x10>
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010000 	.word	0x40010000
 80018d4:	48000400 	.word	0x48000400
 80018d8:	48000800 	.word	0x48000800
 80018dc:	48000c00 	.word	0x48000c00
 80018e0:	48001000 	.word	0x48001000
 80018e4:	48001400 	.word	0x48001400
 80018e8:	48001800 	.word	0x48001800
 80018ec:	40010400 	.word	0x40010400

080018f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001900:	787b      	ldrb	r3, [r7, #1]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800190c:	e002      	b.n	8001914 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4013      	ands	r3, r2
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	43d9      	mvns	r1, r3
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	400b      	ands	r3, r1
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	619a      	str	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e081      	b.n	8001a6a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d106      	bne.n	8001980 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fab8 	bl	8000ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2224      	movs	r2, #36	; 0x24
 8001984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0201 	bic.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	e006      	b.n	80019dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d104      	bne.n	80019ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69d9      	ldr	r1, [r3, #28]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2220      	movs	r2, #32
 8001a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	817b      	strh	r3, [r7, #10]
 8001a86:	460b      	mov	r3, r1
 8001a88:	813b      	strh	r3, [r7, #8]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b20      	cmp	r3, #32
 8001a98:	f040 80f9 	bne.w	8001c8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_I2C_Mem_Write+0x34>
 8001aa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d105      	bne.n	8001ab4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0ed      	b.n	8001c90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_I2C_Mem_Write+0x4e>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e0e6      	b.n	8001c90 <HAL_I2C_Mem_Write+0x21c>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001aca:	f7ff fc75 	bl	80013b8 <HAL_GetTick>
 8001ace:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2319      	movs	r3, #25
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 fbcb 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0d1      	b.n	8001c90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2221      	movs	r2, #33	; 0x21
 8001af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2240      	movs	r2, #64	; 0x40
 8001af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a3a      	ldr	r2, [r7, #32]
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b14:	88f8      	ldrh	r0, [r7, #6]
 8001b16:	893a      	ldrh	r2, [r7, #8]
 8001b18:	8979      	ldrh	r1, [r7, #10]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	4603      	mov	r3, r0
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 fadb 	bl	80020e0 <I2C_RequestMemoryWrite>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0a9      	b.n	8001c90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2bff      	cmp	r3, #255	; 0xff
 8001b44:	d90e      	bls.n	8001b64 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	22ff      	movs	r2, #255	; 0xff
 8001b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	8979      	ldrh	r1, [r7, #10]
 8001b54:	2300      	movs	r3, #0
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 fd33 	bl	80025c8 <I2C_TransferConfig>
 8001b62:	e00f      	b.n	8001b84 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	8979      	ldrh	r1, [r7, #10]
 8001b76:	2300      	movs	r3, #0
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 fd22 	bl	80025c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fbb5 	bl	80022f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e07b      	b.n	8001c90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d034      	beq.n	8001c3c <HAL_I2C_Mem_Write+0x1c8>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d130      	bne.n	8001c3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	2200      	movs	r2, #0
 8001be2:	2180      	movs	r1, #128	; 0x80
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 fb47 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e04d      	b.n	8001c90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2bff      	cmp	r3, #255	; 0xff
 8001bfc:	d90e      	bls.n	8001c1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	22ff      	movs	r2, #255	; 0xff
 8001c02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	8979      	ldrh	r1, [r7, #10]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 fcd7 	bl	80025c8 <I2C_TransferConfig>
 8001c1a:	e00f      	b.n	8001c3c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	8979      	ldrh	r1, [r7, #10]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 fcc6 	bl	80025c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d19e      	bne.n	8001b84 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fb94 	bl	8002378 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e01a      	b.n	8001c90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_I2C_Mem_Write+0x224>)
 8001c6e:	400b      	ands	r3, r1
 8001c70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001c8e:	2302      	movs	r3, #2
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	fe00e800 	.word	0xfe00e800

08001c9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4603      	mov	r3, r0
 8001cac:	817b      	strh	r3, [r7, #10]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	813b      	strh	r3, [r7, #8]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	f040 80fd 	bne.w	8001ebe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_I2C_Mem_Read+0x34>
 8001cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0f1      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_I2C_Mem_Read+0x4e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0ea      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x224>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cf2:	f7ff fb61 	bl	80013b8 <HAL_GetTick>
 8001cf6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2319      	movs	r3, #25
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 fab7 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0d5      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2222      	movs	r2, #34	; 0x22
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a3a      	ldr	r2, [r7, #32]
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d3c:	88f8      	ldrh	r0, [r7, #6]
 8001d3e:	893a      	ldrh	r2, [r7, #8]
 8001d40:	8979      	ldrh	r1, [r7, #10]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fa1b 	bl	8002188 <I2C_RequestMemoryRead>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0ad      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2bff      	cmp	r3, #255	; 0xff
 8001d6c:	d90e      	bls.n	8001d8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	22ff      	movs	r2, #255	; 0xff
 8001d72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	8979      	ldrh	r1, [r7, #10]
 8001d7c:	4b52      	ldr	r3, [pc, #328]	; (8001ec8 <HAL_I2C_Mem_Read+0x22c>)
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 fc1f 	bl	80025c8 <I2C_TransferConfig>
 8001d8a:	e00f      	b.n	8001dac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	8979      	ldrh	r1, [r7, #10]
 8001d9e:	4b4a      	ldr	r3, [pc, #296]	; (8001ec8 <HAL_I2C_Mem_Read+0x22c>)
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fc0e 	bl	80025c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	2200      	movs	r2, #0
 8001db4:	2104      	movs	r1, #4
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 fa5e 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e07c      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d034      	beq.n	8001e6c <HAL_I2C_Mem_Read+0x1d0>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d130      	bne.n	8001e6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	2200      	movs	r2, #0
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fa2f 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e04d      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2bff      	cmp	r3, #255	; 0xff
 8001e2c:	d90e      	bls.n	8001e4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	22ff      	movs	r2, #255	; 0xff
 8001e32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	8979      	ldrh	r1, [r7, #10]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fbbf 	bl	80025c8 <I2C_TransferConfig>
 8001e4a:	e00f      	b.n	8001e6c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	8979      	ldrh	r1, [r7, #10]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fbae 	bl	80025c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d19a      	bne.n	8001dac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fa7c 	bl	8002378 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e01a      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_I2C_Mem_Read+0x230>)
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e000      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001ebe:	2302      	movs	r3, #2
  }
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	80002400 	.word	0x80002400
 8001ecc:	fe00e800 	.word	0xfe00e800

08001ed0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	460b      	mov	r3, r1
 8001ede:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	f040 80f1 	bne.w	80020d4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f00:	d101      	bne.n	8001f06 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001f02:	2302      	movs	r3, #2
 8001f04:	e0e7      	b.n	80020d6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_I2C_IsDeviceReady+0x44>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e0e0      	b.n	80020d6 <HAL_I2C_IsDeviceReady+0x206>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2224      	movs	r2, #36	; 0x24
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d107      	bne.n	8001f42 <HAL_I2C_IsDeviceReady+0x72>
 8001f32:	897b      	ldrh	r3, [r7, #10]
 8001f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f40:	e004      	b.n	8001f4c <HAL_I2C_IsDeviceReady+0x7c>
 8001f42:	897b      	ldrh	r3, [r7, #10]
 8001f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f48:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001f52:	f7ff fa31 	bl	80013b8 <HAL_GetTick>
 8001f56:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	bf0c      	ite	eq
 8001f66:	2301      	moveq	r3, #1
 8001f68:	2300      	movne	r3, #0
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	2b10      	cmp	r3, #16
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2301      	moveq	r3, #1
 8001f7e:	2300      	movne	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f84:	e034      	b.n	8001ff0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f8e:	f7ff fa13 	bl	80013b8 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d302      	bcc.n	8001fa4 <HAL_I2C_IsDeviceReady+0xd4>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10f      	bne.n	8001fc4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	f043 0220 	orr.w	r2, r3, #32
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e088      	b.n	80020d6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	bf0c      	ite	eq
 8001fd2:	2301      	moveq	r3, #1
 8001fd4:	2300      	movne	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ff0:	7ffb      	ldrb	r3, [r7, #31]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <HAL_I2C_IsDeviceReady+0x12c>
 8001ff6:	7fbb      	ldrb	r3, [r7, #30]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0c4      	beq.n	8001f86 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b10      	cmp	r3, #16
 8002008:	d01a      	beq.n	8002040 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2200      	movs	r2, #0
 8002012:	2120      	movs	r1, #32
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f92f 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e058      	b.n	80020d6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2220      	movs	r2, #32
 800202a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	e04a      	b.n	80020d6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2200      	movs	r2, #0
 8002048:	2120      	movs	r1, #32
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f914 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e03d      	b.n	80020d6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2210      	movs	r2, #16
 8002060:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2220      	movs	r2, #32
 8002068:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	429a      	cmp	r2, r3
 8002070:	d118      	bne.n	80020a4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002080:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2200      	movs	r2, #0
 800208a:	2120      	movs	r1, #32
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f8f3 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e01c      	b.n	80020d6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2220      	movs	r2, #32
 80020a2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3301      	adds	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	f63f af3b 	bhi.w	8001f2a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	f043 0220 	orr.w	r2, r3, #32
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80020d4:	2302      	movs	r3, #2
  }
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	4608      	mov	r0, r1
 80020ea:	4611      	mov	r1, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	817b      	strh	r3, [r7, #10]
 80020f2:	460b      	mov	r3, r1
 80020f4:	813b      	strh	r3, [r7, #8]
 80020f6:	4613      	mov	r3, r2
 80020f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	8979      	ldrh	r1, [r7, #10]
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <I2C_RequestMemoryWrite+0xa4>)
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 fa5d 	bl	80025c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	69b9      	ldr	r1, [r7, #24]
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f8f0 	bl	80022f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e02c      	b.n	800217c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d105      	bne.n	8002134 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002128:	893b      	ldrh	r3, [r7, #8]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	629a      	str	r2, [r3, #40]	; 0x28
 8002132:	e015      	b.n	8002160 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002134:	893b      	ldrh	r3, [r7, #8]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	b29b      	uxth	r3, r3
 800213a:	b2da      	uxtb	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	69b9      	ldr	r1, [r7, #24]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f8d6 	bl	80022f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e012      	b.n	800217c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002156:	893b      	ldrh	r3, [r7, #8]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2200      	movs	r2, #0
 8002168:	2180      	movs	r1, #128	; 0x80
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 f884 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	80002000 	.word	0x80002000

08002188 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	4608      	mov	r0, r1
 8002192:	4611      	mov	r1, r2
 8002194:	461a      	mov	r2, r3
 8002196:	4603      	mov	r3, r0
 8002198:	817b      	strh	r3, [r7, #10]
 800219a:	460b      	mov	r3, r1
 800219c:	813b      	strh	r3, [r7, #8]
 800219e:	4613      	mov	r3, r2
 80021a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	8979      	ldrh	r1, [r7, #10]
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <I2C_RequestMemoryRead+0xa4>)
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2300      	movs	r3, #0
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fa0a 	bl	80025c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	69b9      	ldr	r1, [r7, #24]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f89d 	bl	80022f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e02c      	b.n	8002222 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021ce:	893b      	ldrh	r3, [r7, #8]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
 80021d8:	e015      	b.n	8002206 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021da:	893b      	ldrh	r3, [r7, #8]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	b29b      	uxth	r3, r3
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	69b9      	ldr	r1, [r7, #24]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f883 	bl	80022f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e012      	b.n	8002222 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021fc:	893b      	ldrh	r3, [r7, #8]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2200      	movs	r2, #0
 800220e:	2140      	movs	r1, #64	; 0x40
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f831 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	80002000 	.word	0x80002000

08002230 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d103      	bne.n	800224e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2200      	movs	r2, #0
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d007      	beq.n	800226c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	619a      	str	r2, [r3, #24]
  }
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002288:	e022      	b.n	80022d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002290:	d01e      	beq.n	80022d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002292:	f7ff f891 	bl	80013b8 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d302      	bcc.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d113      	bne.n	80022d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e00f      	b.n	80022f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4013      	ands	r3, r2
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	429a      	cmp	r2, r3
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d0cd      	beq.n	800228a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002304:	e02c      	b.n	8002360 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f870 	bl	80023f0 <I2C_IsErrorOccurred>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e02a      	b.n	8002370 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002320:	d01e      	beq.n	8002360 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002322:	f7ff f849 	bl	80013b8 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	429a      	cmp	r2, r3
 8002330:	d302      	bcc.n	8002338 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d113      	bne.n	8002360 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e007      	b.n	8002370 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b02      	cmp	r3, #2
 800236c:	d1cb      	bne.n	8002306 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002384:	e028      	b.n	80023d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f830 	bl	80023f0 <I2C_IsErrorOccurred>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e026      	b.n	80023e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7ff f80d 	bl	80013b8 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d113      	bne.n	80023d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	f043 0220 	orr.w	r2, r3, #32
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e007      	b.n	80023e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d1cf      	bne.n	8002386 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	d075      	beq.n	8002508 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2210      	movs	r2, #16
 8002422:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002424:	e056      	b.n	80024d4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800242c:	d052      	beq.n	80024d4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800242e:	f7fe ffc3 	bl	80013b8 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	429a      	cmp	r2, r3
 800243c:	d302      	bcc.n	8002444 <I2C_IsErrorOccurred+0x54>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d147      	bne.n	80024d4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002456:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002466:	d12e      	bne.n	80024c6 <I2C_IsErrorOccurred+0xd6>
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800246e:	d02a      	beq.n	80024c6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	2b20      	cmp	r3, #32
 8002474:	d027      	beq.n	80024c6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002484:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002486:	f7fe ff97 	bl	80013b8 <HAL_GetTick>
 800248a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800248c:	e01b      	b.n	80024c6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800248e:	f7fe ff93 	bl	80013b8 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b19      	cmp	r3, #25
 800249a:	d914      	bls.n	80024c6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	f043 0220 	orr.w	r2, r3, #32
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d1dc      	bne.n	800248e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b20      	cmp	r3, #32
 80024e0:	d003      	beq.n	80024ea <I2C_IsErrorOccurred+0xfa>
 80024e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d09d      	beq.n	8002426 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2220      	movs	r2, #32
 80024f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800252a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00b      	beq.n	8002554 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	f043 0308 	orr.w	r3, r3, #8
 8002542:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800254c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00b      	beq.n	8002576 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800256e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01c      	beq.n	80025b8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f7ff fe56 	bl	8002230 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6859      	ldr	r1, [r3, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <I2C_IsErrorOccurred+0x1d4>)
 8002590:	400b      	ands	r3, r1
 8002592:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	431a      	orrs	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80025b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3728      	adds	r7, #40	; 0x28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	fe00e800 	.word	0xfe00e800

080025c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	817b      	strh	r3, [r7, #10]
 80025d6:	4613      	mov	r3, r2
 80025d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025da:	897b      	ldrh	r3, [r7, #10]
 80025dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025e0:	7a7b      	ldrb	r3, [r7, #9]
 80025e2:	041b      	lsls	r3, r3, #16
 80025e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025e8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025f6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	0d5b      	lsrs	r3, r3, #21
 8002602:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <I2C_TransferConfig+0x60>)
 8002608:	430b      	orrs	r3, r1
 800260a:	43db      	mvns	r3, r3
 800260c:	ea02 0103 	and.w	r1, r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	03ff63ff 	.word	0x03ff63ff

0800262c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b20      	cmp	r3, #32
 8002640:	d138      	bne.n	80026b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800264c:	2302      	movs	r3, #2
 800264e:	e032      	b.n	80026b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2224      	movs	r2, #36	; 0x24
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800267e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e000      	b.n	80026b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d139      	bne.n	800274c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e033      	b.n	800274e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2224      	movs	r2, #36	; 0x24
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002714:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4313      	orrs	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e000      	b.n	800274e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800274c:	2302      	movs	r3, #2
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <HAL_PWREx_GetVoltageRange+0x18>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40007000 	.word	0x40007000

08002778 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002786:	d130      	bne.n	80027ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002788:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002794:	d038      	beq.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800279e:	4a1e      	ldr	r2, [pc, #120]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2232      	movs	r2, #50	; 0x32
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0c9b      	lsrs	r3, r3, #18
 80027b8:	3301      	adds	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027bc:	e002      	b.n	80027c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d0:	d102      	bne.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f2      	bne.n	80027be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e4:	d110      	bne.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e00f      	b.n	800280a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f6:	d007      	beq.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002800:	4a05      	ldr	r2, [pc, #20]	; (8002818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002806:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40007000 	.word	0x40007000
 800281c:	20000000 	.word	0x20000000
 8002820:	431bde83 	.word	0x431bde83

08002824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e3d4      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002836:	4ba1      	ldr	r3, [pc, #644]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002840:	4b9e      	ldr	r3, [pc, #632]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80e4 	beq.w	8002a20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_RCC_OscConfig+0x4a>
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b0c      	cmp	r3, #12
 8002862:	f040 808b 	bne.w	800297c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b01      	cmp	r3, #1
 800286a:	f040 8087 	bne.w	800297c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800286e:	4b93      	ldr	r3, [pc, #588]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x62>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e3ac      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1a      	ldr	r2, [r3, #32]
 800288a:	4b8c      	ldr	r3, [pc, #560]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <HAL_RCC_OscConfig+0x7c>
 8002896:	4b89      	ldr	r3, [pc, #548]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800289e:	e005      	b.n	80028ac <HAL_RCC_OscConfig+0x88>
 80028a0:	4b86      	ldr	r3, [pc, #536]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d223      	bcs.n	80028f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fd41 	bl	800333c <RCC_SetFlashLatencyFromMSIRange>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e38d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028c4:	4b7d      	ldr	r3, [pc, #500]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a7c      	ldr	r2, [pc, #496]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028ca:	f043 0308 	orr.w	r3, r3, #8
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b7a      	ldr	r3, [pc, #488]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4977      	ldr	r1, [pc, #476]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028e2:	4b76      	ldr	r3, [pc, #472]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	4972      	ldr	r1, [pc, #456]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
 80028f6:	e025      	b.n	8002944 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028f8:	4b70      	ldr	r3, [pc, #448]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6f      	ldr	r2, [pc, #444]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80028fe:	f043 0308 	orr.w	r3, r3, #8
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b6d      	ldr	r3, [pc, #436]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	496a      	ldr	r1, [pc, #424]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002916:	4b69      	ldr	r3, [pc, #420]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	4965      	ldr	r1, [pc, #404]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d109      	bne.n	8002944 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fd01 	bl	800333c <RCC_SetFlashLatencyFromMSIRange>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e34d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002944:	f000 fc36 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b5c      	ldr	r3, [pc, #368]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	495a      	ldr	r1, [pc, #360]	; (8002ac0 <HAL_RCC_OscConfig+0x29c>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	4a58      	ldr	r2, [pc, #352]	; (8002ac4 <HAL_RCC_OscConfig+0x2a0>)
 8002962:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002964:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <HAL_RCC_OscConfig+0x2a4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fcd5 	bl	8001318 <HAL_InitTick>
 800296e:	4603      	mov	r3, r0
 8002970:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d052      	beq.n	8002a1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	e331      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d032      	beq.n	80029ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002984:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002990:	f7fe fd12 	bl	80013b8 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002998:	f7fe fd0e 	bl	80013b8 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e31a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029aa:	4b44      	ldr	r3, [pc, #272]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029b6:	4b41      	ldr	r3, [pc, #260]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a40      	ldr	r2, [pc, #256]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029bc:	f043 0308 	orr.w	r3, r3, #8
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	493b      	ldr	r1, [pc, #236]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029d4:	4b39      	ldr	r3, [pc, #228]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	4936      	ldr	r1, [pc, #216]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
 80029e8:	e01a      	b.n	8002a20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029ea:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a33      	ldr	r2, [pc, #204]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029f6:	f7fe fcdf 	bl	80013b8 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029fe:	f7fe fcdb 	bl	80013b8 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e2e7      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a10:	4b2a      	ldr	r3, [pc, #168]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCC_OscConfig+0x1da>
 8002a1c:	e000      	b.n	8002a20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d074      	beq.n	8002b16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d005      	beq.n	8002a3e <HAL_RCC_OscConfig+0x21a>
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	d10e      	bne.n	8002a56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d10b      	bne.n	8002a56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d064      	beq.n	8002b14 <HAL_RCC_OscConfig+0x2f0>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d160      	bne.n	8002b14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e2c4      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x24a>
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a15      	ldr	r2, [pc, #84]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	e01d      	b.n	8002aaa <HAL_RCC_OscConfig+0x286>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a76:	d10c      	bne.n	8002a92 <HAL_RCC_OscConfig+0x26e>
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0f      	ldr	r2, [pc, #60]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	e00b      	b.n	8002aaa <HAL_RCC_OscConfig+0x286>
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a06      	ldr	r2, [pc, #24]	; (8002abc <HAL_RCC_OscConfig+0x298>)
 8002aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01c      	beq.n	8002aec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab2:	f7fe fc81 	bl	80013b8 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab8:	e011      	b.n	8002ade <HAL_RCC_OscConfig+0x2ba>
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	0800678c 	.word	0x0800678c
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fe fc74 	bl	80013b8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	; 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e280      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ade:	4baf      	ldr	r3, [pc, #700]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x2a8>
 8002aea:	e014      	b.n	8002b16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe fc64 	bl	80013b8 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af4:	f7fe fc60 	bl	80013b8 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e26c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b06:	4ba5      	ldr	r3, [pc, #660]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x2d0>
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d060      	beq.n	8002be4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_OscConfig+0x310>
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d119      	bne.n	8002b62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d116      	bne.n	8002b62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b34:	4b99      	ldr	r3, [pc, #612]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_OscConfig+0x328>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e249      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4c:	4b93      	ldr	r3, [pc, #588]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	061b      	lsls	r3, r3, #24
 8002b5a:	4990      	ldr	r1, [pc, #576]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b60:	e040      	b.n	8002be4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d023      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b6a:	4b8c      	ldr	r3, [pc, #560]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a8b      	ldr	r2, [pc, #556]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fe fc1f 	bl	80013b8 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7e:	f7fe fc1b 	bl	80013b8 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e227      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b90:	4b82      	ldr	r3, [pc, #520]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b7f      	ldr	r3, [pc, #508]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	497c      	ldr	r1, [pc, #496]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
 8002bb0:	e018      	b.n	8002be4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb2:	4b7a      	ldr	r3, [pc, #488]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a79      	ldr	r2, [pc, #484]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fbfb 	bl	80013b8 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7fe fbf7 	bl	80013b8 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e203      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bd8:	4b70      	ldr	r3, [pc, #448]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d03c      	beq.n	8002c6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01c      	beq.n	8002c32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf8:	4b68      	ldr	r3, [pc, #416]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfe:	4a67      	ldr	r2, [pc, #412]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe fbd6 	bl	80013b8 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c10:	f7fe fbd2 	bl	80013b8 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1de      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c22:	4b5e      	ldr	r3, [pc, #376]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ef      	beq.n	8002c10 <HAL_RCC_OscConfig+0x3ec>
 8002c30:	e01b      	b.n	8002c6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c32:	4b5a      	ldr	r3, [pc, #360]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c38:	4a58      	ldr	r2, [pc, #352]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c42:	f7fe fbb9 	bl	80013b8 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fbb5 	bl	80013b8 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e1c1      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c5c:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1ef      	bne.n	8002c4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80a6 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c7c:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c88:	4b44      	ldr	r3, [pc, #272]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	4a43      	ldr	r2, [pc, #268]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6593      	str	r3, [r2, #88]	; 0x58
 8002c94:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca4:	4b3e      	ldr	r3, [pc, #248]	; (8002da0 <HAL_RCC_OscConfig+0x57c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d118      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb0:	4b3b      	ldr	r3, [pc, #236]	; (8002da0 <HAL_RCC_OscConfig+0x57c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a3a      	ldr	r2, [pc, #232]	; (8002da0 <HAL_RCC_OscConfig+0x57c>)
 8002cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fb7c 	bl	80013b8 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc4:	f7fe fb78 	bl	80013b8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e184      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd6:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <HAL_RCC_OscConfig+0x57c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d108      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4d8>
 8002cea:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	4a2a      	ldr	r2, [pc, #168]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cfa:	e024      	b.n	8002d46 <HAL_RCC_OscConfig+0x522>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d110      	bne.n	8002d26 <HAL_RCC_OscConfig+0x502>
 8002d04:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0a:	4a24      	ldr	r2, [pc, #144]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d0c:	f043 0304 	orr.w	r3, r3, #4
 8002d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d14:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	4a20      	ldr	r2, [pc, #128]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d24:	e00f      	b.n	8002d46 <HAL_RCC_OscConfig+0x522>
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2c:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d36:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d3e:	f023 0304 	bic.w	r3, r3, #4
 8002d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fb33 	bl	80013b8 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe fb2f 	bl	80013b8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e139      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x578>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0ed      	beq.n	8002d56 <HAL_RCC_OscConfig+0x532>
 8002d7a:	e01a      	b.n	8002db2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fb1c 	bl	80013b8 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d82:	e00f      	b.n	8002da4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe fb18 	bl	80013b8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d906      	bls.n	8002da4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e122      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002da4:	4b90      	ldr	r3, [pc, #576]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e8      	bne.n	8002d84 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d105      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db8:	4b8b      	ldr	r3, [pc, #556]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	4a8a      	ldr	r2, [pc, #552]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8108 	beq.w	8002fde <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	f040 80d0 	bne.w	8002f78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dd8:	4b83      	ldr	r3, [pc, #524]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 0203 	and.w	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d130      	bne.n	8002e4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	3b01      	subs	r3, #1
 8002df8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d127      	bne.n	8002e4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d11f      	bne.n	8002e4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e18:	2a07      	cmp	r2, #7
 8002e1a:	bf14      	ite	ne
 8002e1c:	2201      	movne	r2, #1
 8002e1e:	2200      	moveq	r2, #0
 8002e20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d113      	bne.n	8002e4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	3b01      	subs	r3, #1
 8002e34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d109      	bne.n	8002e4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d06e      	beq.n	8002f2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	2b0c      	cmp	r3, #12
 8002e52:	d069      	beq.n	8002f28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e54:	4b64      	ldr	r3, [pc, #400]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e60:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0b7      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e70:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a5c      	ldr	r2, [pc, #368]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e7c:	f7fe fa9c 	bl	80013b8 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe fa98 	bl	80013b8 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e0a4      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e96:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea2:	4b51      	ldr	r3, [pc, #324]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	4b51      	ldr	r3, [pc, #324]	; (8002fec <HAL_RCC_OscConfig+0x7c8>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002eb2:	3a01      	subs	r2, #1
 8002eb4:	0112      	lsls	r2, r2, #4
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ebc:	0212      	lsls	r2, r2, #8
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ec4:	0852      	lsrs	r2, r2, #1
 8002ec6:	3a01      	subs	r2, #1
 8002ec8:	0552      	lsls	r2, r2, #21
 8002eca:	4311      	orrs	r1, r2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ed0:	0852      	lsrs	r2, r2, #1
 8002ed2:	3a01      	subs	r2, #1
 8002ed4:	0652      	lsls	r2, r2, #25
 8002ed6:	4311      	orrs	r1, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002edc:	0912      	lsrs	r2, r2, #4
 8002ede:	0452      	lsls	r2, r2, #17
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	4941      	ldr	r1, [pc, #260]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ee8:	4b3f      	ldr	r3, [pc, #252]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a3e      	ldr	r2, [pc, #248]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef4:	4b3c      	ldr	r3, [pc, #240]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4a3b      	ldr	r2, [pc, #236]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f00:	f7fe fa5a 	bl	80013b8 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe fa56 	bl	80013b8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e062      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1a:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f26:	e05a      	b.n	8002fde <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e059      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2c:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d152      	bne.n	8002fde <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f38:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2a      	ldr	r2, [pc, #168]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f44:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4a27      	ldr	r2, [pc, #156]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f50:	f7fe fa32 	bl	80013b8 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe fa2e 	bl	80013b8 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e03a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6a:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x734>
 8002f76:	e032      	b.n	8002fde <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d02d      	beq.n	8002fda <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f88:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f8a:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f96:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002f9c:	f023 0303 	bic.w	r3, r3, #3
 8002fa0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002fa8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fa01 	bl	80013b8 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fba:	f7fe f9fd 	bl	80013b8 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e009      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_RCC_OscConfig+0x7c4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCC_OscConfig+0x796>
 8002fd8:	e001      	b.n	8002fde <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	f99d808c 	.word	0xf99d808c

08002ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0c8      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003004:	4b66      	ldr	r3, [pc, #408]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d910      	bls.n	8003034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 0207 	bic.w	r2, r3, #7
 800301a:	4961      	ldr	r1, [pc, #388]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	4b5f      	ldr	r3, [pc, #380]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0b0      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d04c      	beq.n	80030da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d107      	bne.n	8003058 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003048:	4b56      	ldr	r3, [pc, #344]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d121      	bne.n	8003098 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e09e      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d107      	bne.n	8003070 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d115      	bne.n	8003098 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e092      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d107      	bne.n	8003088 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003078:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e086      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003088:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e07e      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003098:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f023 0203 	bic.w	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	493f      	ldr	r1, [pc, #252]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030aa:	f7fe f985 	bl	80013b8 <HAL_GetTick>
 80030ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b2:	f7fe f981 	bl	80013b8 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e066      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c8:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 020c 	and.w	r2, r3, #12
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d1eb      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e6:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	492c      	ldr	r1, [pc, #176]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f8:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d210      	bcs.n	8003128 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 0207 	bic.w	r2, r3, #7
 800310e:	4924      	ldr	r1, [pc, #144]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e036      	b.n	8003196 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4918      	ldr	r1, [pc, #96]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4910      	ldr	r1, [pc, #64]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003166:	f000 f825 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 800316a:	4602      	mov	r2, r0
 800316c:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <HAL_RCC_ClockConfig+0x1b4>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	490c      	ldr	r1, [pc, #48]	; (80031a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	5ccb      	ldrb	r3, [r1, r3]
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	fa22 f303 	lsr.w	r3, r2, r3
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe f8c4 	bl	8001318 <HAL_InitTick>
 8003190:	4603      	mov	r3, r0
 8003192:	72fb      	strb	r3, [r7, #11]

  return status;
 8003194:	7afb      	ldrb	r3, [r7, #11]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40022000 	.word	0x40022000
 80031a4:	40021000 	.word	0x40021000
 80031a8:	0800678c 	.word	0x0800678c
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	; 0x24
 80031b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c2:	4b3e      	ldr	r3, [pc, #248]	; (80032bc <HAL_RCC_GetSysClockFreq+0x108>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031cc:	4b3b      	ldr	r3, [pc, #236]	; (80032bc <HAL_RCC_GetSysClockFreq+0x108>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x34>
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d121      	bne.n	8003226 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d11e      	bne.n	8003226 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031e8:	4b34      	ldr	r3, [pc, #208]	; (80032bc <HAL_RCC_GetSysClockFreq+0x108>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d107      	bne.n	8003204 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031f4:	4b31      	ldr	r3, [pc, #196]	; (80032bc <HAL_RCC_GetSysClockFreq+0x108>)
 80031f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	e005      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003204:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003210:	4a2b      	ldr	r2, [pc, #172]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003218:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10d      	bne.n	800323c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003224:	e00a      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d102      	bne.n	8003232 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800322c:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800322e:	61bb      	str	r3, [r7, #24]
 8003230:	e004      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d101      	bne.n	800323c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003238:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800323a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b0c      	cmp	r3, #12
 8003240:	d134      	bne.n	80032ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d003      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0xa6>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b03      	cmp	r3, #3
 8003256:	d003      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0xac>
 8003258:	e005      	b.n	8003266 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800325a:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800325c:	617b      	str	r3, [r7, #20]
      break;
 800325e:	e005      	b.n	800326c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003260:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003262:	617b      	str	r3, [r7, #20]
      break;
 8003264:	e002      	b.n	800326c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	617b      	str	r3, [r7, #20]
      break;
 800326a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_RCC_GetSysClockFreq+0x108>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	3301      	adds	r3, #1
 8003278:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <HAL_RCC_GetSysClockFreq+0x108>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	fb02 f203 	mul.w	r2, r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	0e5b      	lsrs	r3, r3, #25
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	3301      	adds	r3, #1
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032ac:	69bb      	ldr	r3, [r7, #24]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3724      	adds	r7, #36	; 0x24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000
 80032c0:	080067a4 	.word	0x080067a4
 80032c4:	00f42400 	.word	0x00f42400
 80032c8:	007a1200 	.word	0x007a1200

080032cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000000 	.word	0x20000000

080032e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032e8:	f7ff fff0 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4904      	ldr	r1, [pc, #16]	; (800330c <HAL_RCC_GetPCLK1Freq+0x28>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000
 800330c:	0800679c 	.word	0x0800679c

08003310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003314:	f7ff ffda 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCC_GetPCLK2Freq+0x24>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	0adb      	lsrs	r3, r3, #11
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4904      	ldr	r1, [pc, #16]	; (8003338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000
 8003338:	0800679c 	.word	0x0800679c

0800333c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003348:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003354:	f7ff fa02 	bl	800275c <HAL_PWREx_GetVoltageRange>
 8003358:	6178      	str	r0, [r7, #20]
 800335a:	e014      	b.n	8003386 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800335c:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	4a24      	ldr	r2, [pc, #144]	; (80033f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003366:	6593      	str	r3, [r2, #88]	; 0x58
 8003368:	4b22      	ldr	r3, [pc, #136]	; (80033f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003374:	f7ff f9f2 	bl	800275c <HAL_PWREx_GetVoltageRange>
 8003378:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800337a:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	4a1d      	ldr	r2, [pc, #116]	; (80033f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003384:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338c:	d10b      	bne.n	80033a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b80      	cmp	r3, #128	; 0x80
 8003392:	d919      	bls.n	80033c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2ba0      	cmp	r3, #160	; 0xa0
 8003398:	d902      	bls.n	80033a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800339a:	2302      	movs	r3, #2
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	e013      	b.n	80033c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033a0:	2301      	movs	r3, #1
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	e010      	b.n	80033c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b80      	cmp	r3, #128	; 0x80
 80033aa:	d902      	bls.n	80033b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033ac:	2303      	movs	r3, #3
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	e00a      	b.n	80033c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b80      	cmp	r3, #128	; 0x80
 80033b6:	d102      	bne.n	80033be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033b8:	2302      	movs	r3, #2
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	e004      	b.n	80033c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b70      	cmp	r3, #112	; 0x70
 80033c2:	d101      	bne.n	80033c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033c4:	2301      	movs	r3, #1
 80033c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f023 0207 	bic.w	r2, r3, #7
 80033d0:	4909      	ldr	r1, [pc, #36]	; (80033f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033d8:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d001      	beq.n	80033ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40022000 	.word	0x40022000

080033fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003404:	2300      	movs	r3, #0
 8003406:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003408:	2300      	movs	r3, #0
 800340a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003414:	2b00      	cmp	r3, #0
 8003416:	d041      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003420:	d02a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003422:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003426:	d824      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003428:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800342c:	d008      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800342e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003432:	d81e      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800343c:	d010      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800343e:	e018      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003440:	4b86      	ldr	r3, [pc, #536]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a85      	ldr	r2, [pc, #532]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800344c:	e015      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fabb 	bl	80039d0 <RCCEx_PLLSAI1_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800345e:	e00c      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3320      	adds	r3, #32
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fba6 	bl	8003bb8 <RCCEx_PLLSAI2_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003470:	e003      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	74fb      	strb	r3, [r7, #19]
      break;
 8003476:	e000      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10b      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003480:	4b76      	ldr	r3, [pc, #472]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800348e:	4973      	ldr	r1, [pc, #460]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003496:	e001      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d041      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034b0:	d02a      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034b6:	d824      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034bc:	d008      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034c2:	d81e      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034cc:	d010      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034ce:	e018      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034d0:	4b62      	ldr	r3, [pc, #392]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4a61      	ldr	r2, [pc, #388]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034dc:	e015      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3304      	adds	r3, #4
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fa73 	bl	80039d0 <RCCEx_PLLSAI1_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ee:	e00c      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3320      	adds	r3, #32
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fb5e 	bl	8003bb8 <RCCEx_PLLSAI2_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003500:	e003      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	74fb      	strb	r3, [r7, #19]
      break;
 8003506:	e000      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10b      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003510:	4b52      	ldr	r3, [pc, #328]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800351e:	494f      	ldr	r1, [pc, #316]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003526:	e001      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80a0 	beq.w	800367a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800353e:	4b47      	ldr	r3, [pc, #284]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800354e:	2300      	movs	r3, #0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00d      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003554:	4b41      	ldr	r3, [pc, #260]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	4a40      	ldr	r2, [pc, #256]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355e:	6593      	str	r3, [r2, #88]	; 0x58
 8003560:	4b3e      	ldr	r3, [pc, #248]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356c:	2301      	movs	r3, #1
 800356e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003570:	4b3b      	ldr	r3, [pc, #236]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a3a      	ldr	r2, [pc, #232]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800357c:	f7fd ff1c 	bl	80013b8 <HAL_GetTick>
 8003580:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003582:	e009      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003584:	f7fd ff18 	bl	80013b8 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	74fb      	strb	r3, [r7, #19]
        break;
 8003596:	e005      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003598:	4b31      	ldr	r3, [pc, #196]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ef      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d15c      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01f      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d019      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035c8:	4b24      	ldr	r3, [pc, #144]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035d4:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	4a20      	ldr	r2, [pc, #128]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035e4:	4b1d      	ldr	r3, [pc, #116]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	4a1c      	ldr	r2, [pc, #112]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035f4:	4a19      	ldr	r2, [pc, #100]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d016      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7fd fed7 	bl	80013b8 <HAL_GetTick>
 800360a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800360c:	e00b      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fd fed3 	bl	80013b8 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f241 3288 	movw	r2, #5000	; 0x1388
 800361c:	4293      	cmp	r3, r2
 800361e:	d902      	bls.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	74fb      	strb	r3, [r7, #19]
            break;
 8003624:	e006      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0ec      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10c      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800363a:	4b08      	ldr	r3, [pc, #32]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364a:	4904      	ldr	r1, [pc, #16]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003652:	e009      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	74bb      	strb	r3, [r7, #18]
 8003658:	e006      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003668:	7c7b      	ldrb	r3, [r7, #17]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366e:	4b9e      	ldr	r3, [pc, #632]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	4a9d      	ldr	r2, [pc, #628]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003678:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003686:	4b98      	ldr	r3, [pc, #608]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368c:	f023 0203 	bic.w	r2, r3, #3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	4994      	ldr	r1, [pc, #592]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036a8:	4b8f      	ldr	r3, [pc, #572]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	f023 020c 	bic.w	r2, r3, #12
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	498c      	ldr	r1, [pc, #560]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036ca:	4b87      	ldr	r3, [pc, #540]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	4983      	ldr	r1, [pc, #524]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036ec:	4b7e      	ldr	r3, [pc, #504]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	497b      	ldr	r1, [pc, #492]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800370e:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371c:	4972      	ldr	r1, [pc, #456]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003730:	4b6d      	ldr	r3, [pc, #436]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	496a      	ldr	r1, [pc, #424]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003752:	4b65      	ldr	r3, [pc, #404]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003758:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	4961      	ldr	r1, [pc, #388]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003774:	4b5c      	ldr	r3, [pc, #368]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003782:	4959      	ldr	r1, [pc, #356]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003796:	4b54      	ldr	r3, [pc, #336]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a4:	4950      	ldr	r1, [pc, #320]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037b8:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	4948      	ldr	r1, [pc, #288]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037da:	4b43      	ldr	r3, [pc, #268]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	493f      	ldr	r1, [pc, #252]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d028      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037fc:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380a:	4937      	ldr	r1, [pc, #220]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003816:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800381a:	d106      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800381c:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4a31      	ldr	r2, [pc, #196]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003826:	60d3      	str	r3, [r2, #12]
 8003828:	e011      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800382e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003832:	d10c      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f8c8 	bl	80039d0 <RCCEx_PLLSAI1_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800384a:	7cfb      	ldrb	r3, [r7, #19]
 800384c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d028      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800385a:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	491f      	ldr	r1, [pc, #124]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003874:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003878:	d106      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	4a1a      	ldr	r2, [pc, #104]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003884:	60d3      	str	r3, [r2, #12]
 8003886:	e011      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003890:	d10c      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3304      	adds	r3, #4
 8003896:	2101      	movs	r1, #1
 8003898:	4618      	mov	r0, r3
 800389a:	f000 f899 	bl	80039d0 <RCCEx_PLLSAI1_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038a2:	7cfb      	ldrb	r3, [r7, #19]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d02b      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c6:	4908      	ldr	r1, [pc, #32]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d6:	d109      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a02      	ldr	r2, [pc, #8]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038e2:	60d3      	str	r3, [r2, #12]
 80038e4:	e014      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038f4:	d10c      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	2101      	movs	r1, #1
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 f867 	bl	80039d0 <RCCEx_PLLSAI1_Config>
 8003902:	4603      	mov	r3, r0
 8003904:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003906:	7cfb      	ldrb	r3, [r7, #19]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800390c:	7cfb      	ldrb	r3, [r7, #19]
 800390e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d02f      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800391c:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392a:	4928      	ldr	r1, [pc, #160]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800393a:	d10d      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3304      	adds	r3, #4
 8003940:	2102      	movs	r1, #2
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f844 	bl	80039d0 <RCCEx_PLLSAI1_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d014      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	74bb      	strb	r3, [r7, #18]
 8003956:	e011      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800395c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003960:	d10c      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3320      	adds	r3, #32
 8003966:	2102      	movs	r1, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f925 	bl	8003bb8 <RCCEx_PLLSAI2_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003972:	7cfb      	ldrb	r3, [r7, #19]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003996:	490d      	ldr	r1, [pc, #52]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ba:	4904      	ldr	r1, [pc, #16]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000

080039d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039de:	4b75      	ldr	r3, [pc, #468]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d018      	beq.n	8003a1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039ea:	4b72      	ldr	r3, [pc, #456]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0203 	and.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d10d      	bne.n	8003a16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
       ||
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a02:	4b6c      	ldr	r3, [pc, #432]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
       ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d047      	beq.n	8003aa6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
 8003a1a:	e044      	b.n	8003aa6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d018      	beq.n	8003a56 <RCCEx_PLLSAI1_Config+0x86>
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d825      	bhi.n	8003a74 <RCCEx_PLLSAI1_Config+0xa4>
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d002      	beq.n	8003a32 <RCCEx_PLLSAI1_Config+0x62>
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d009      	beq.n	8003a44 <RCCEx_PLLSAI1_Config+0x74>
 8003a30:	e020      	b.n	8003a74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a32:	4b60      	ldr	r3, [pc, #384]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d11d      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a42:	e01a      	b.n	8003a7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a44:	4b5b      	ldr	r3, [pc, #364]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d116      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a54:	e013      	b.n	8003a7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a56:	4b57      	ldr	r3, [pc, #348]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a62:	4b54      	ldr	r3, [pc, #336]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a72:	e006      	b.n	8003a82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      break;
 8003a78:	e004      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e002      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e000      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a82:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10d      	bne.n	8003aa6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a8a:	4b4a      	ldr	r3, [pc, #296]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6819      	ldr	r1, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	4944      	ldr	r1, [pc, #272]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d17d      	bne.n	8003ba8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003aac:	4b41      	ldr	r3, [pc, #260]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a40      	ldr	r2, [pc, #256]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab8:	f7fd fc7e 	bl	80013b8 <HAL_GetTick>
 8003abc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003abe:	e009      	b.n	8003ad4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ac0:	f7fd fc7a 	bl	80013b8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d902      	bls.n	8003ad4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ad2:	e005      	b.n	8003ae0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ad4:	4b37      	ldr	r3, [pc, #220]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ef      	bne.n	8003ac0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d160      	bne.n	8003ba8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d111      	bne.n	8003b10 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aec:	4b31      	ldr	r3, [pc, #196]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6892      	ldr	r2, [r2, #8]
 8003afc:	0211      	lsls	r1, r2, #8
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68d2      	ldr	r2, [r2, #12]
 8003b02:	0912      	lsrs	r2, r2, #4
 8003b04:	0452      	lsls	r2, r2, #17
 8003b06:	430a      	orrs	r2, r1
 8003b08:	492a      	ldr	r1, [pc, #168]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	610b      	str	r3, [r1, #16]
 8003b0e:	e027      	b.n	8003b60 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d112      	bne.n	8003b3c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b16:	4b27      	ldr	r3, [pc, #156]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6892      	ldr	r2, [r2, #8]
 8003b26:	0211      	lsls	r1, r2, #8
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6912      	ldr	r2, [r2, #16]
 8003b2c:	0852      	lsrs	r2, r2, #1
 8003b2e:	3a01      	subs	r2, #1
 8003b30:	0552      	lsls	r2, r2, #21
 8003b32:	430a      	orrs	r2, r1
 8003b34:	491f      	ldr	r1, [pc, #124]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	610b      	str	r3, [r1, #16]
 8003b3a:	e011      	b.n	8003b60 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b3c:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6892      	ldr	r2, [r2, #8]
 8003b4c:	0211      	lsls	r1, r2, #8
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6952      	ldr	r2, [r2, #20]
 8003b52:	0852      	lsrs	r2, r2, #1
 8003b54:	3a01      	subs	r2, #1
 8003b56:	0652      	lsls	r2, r2, #25
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	4916      	ldr	r1, [pc, #88]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b60:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fd fc24 	bl	80013b8 <HAL_GetTick>
 8003b70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b72:	e009      	b.n	8003b88 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b74:	f7fd fc20 	bl	80013b8 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d902      	bls.n	8003b88 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	73fb      	strb	r3, [r7, #15]
          break;
 8003b86:	e005      	b.n	8003b94 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0ef      	beq.n	8003b74 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	4904      	ldr	r1, [pc, #16]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bc6:	4b6a      	ldr	r3, [pc, #424]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d018      	beq.n	8003c04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bd2:	4b67      	ldr	r3, [pc, #412]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0203 	and.w	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d10d      	bne.n	8003bfe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
       ||
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bea:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
       ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d047      	beq.n	8003c8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
 8003c02:	e044      	b.n	8003c8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d018      	beq.n	8003c3e <RCCEx_PLLSAI2_Config+0x86>
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d825      	bhi.n	8003c5c <RCCEx_PLLSAI2_Config+0xa4>
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d002      	beq.n	8003c1a <RCCEx_PLLSAI2_Config+0x62>
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d009      	beq.n	8003c2c <RCCEx_PLLSAI2_Config+0x74>
 8003c18:	e020      	b.n	8003c5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c1a:	4b55      	ldr	r3, [pc, #340]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d11d      	bne.n	8003c62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c2a:	e01a      	b.n	8003c62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c2c:	4b50      	ldr	r3, [pc, #320]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d116      	bne.n	8003c66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c3c:	e013      	b.n	8003c66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c3e:	4b4c      	ldr	r3, [pc, #304]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c4a:	4b49      	ldr	r3, [pc, #292]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c5a:	e006      	b.n	8003c6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c60:	e004      	b.n	8003c6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c62:	bf00      	nop
 8003c64:	e002      	b.n	8003c6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c66:	bf00      	nop
 8003c68:	e000      	b.n	8003c6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10d      	bne.n	8003c8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c72:	4b3f      	ldr	r3, [pc, #252]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6819      	ldr	r1, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	430b      	orrs	r3, r1
 8003c88:	4939      	ldr	r1, [pc, #228]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d167      	bne.n	8003d64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c94:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a35      	ldr	r2, [pc, #212]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca0:	f7fd fb8a 	bl	80013b8 <HAL_GetTick>
 8003ca4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ca6:	e009      	b.n	8003cbc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ca8:	f7fd fb86 	bl	80013b8 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d902      	bls.n	8003cbc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	73fb      	strb	r3, [r7, #15]
        break;
 8003cba:	e005      	b.n	8003cc8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cbc:	4b2c      	ldr	r3, [pc, #176]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1ef      	bne.n	8003ca8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d14a      	bne.n	8003d64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d111      	bne.n	8003cf8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cd4:	4b26      	ldr	r3, [pc, #152]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6892      	ldr	r2, [r2, #8]
 8003ce4:	0211      	lsls	r1, r2, #8
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68d2      	ldr	r2, [r2, #12]
 8003cea:	0912      	lsrs	r2, r2, #4
 8003cec:	0452      	lsls	r2, r2, #17
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	491f      	ldr	r1, [pc, #124]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	614b      	str	r3, [r1, #20]
 8003cf6:	e011      	b.n	8003d1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6892      	ldr	r2, [r2, #8]
 8003d08:	0211      	lsls	r1, r2, #8
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6912      	ldr	r2, [r2, #16]
 8003d0e:	0852      	lsrs	r2, r2, #1
 8003d10:	3a01      	subs	r2, #1
 8003d12:	0652      	lsls	r2, r2, #25
 8003d14:	430a      	orrs	r2, r1
 8003d16:	4916      	ldr	r1, [pc, #88]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d1c:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d28:	f7fd fb46 	bl	80013b8 <HAL_GetTick>
 8003d2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d2e:	e009      	b.n	8003d44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d30:	f7fd fb42 	bl	80013b8 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d902      	bls.n	8003d44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	73fb      	strb	r3, [r7, #15]
          break;
 8003d42:	e005      	b.n	8003d50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ef      	beq.n	8003d30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	4904      	ldr	r1, [pc, #16]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000

08003d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e049      	b.n	8003e1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fd f906 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f000 fb7a 	bl	80044ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e049      	b.n	8003ec8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d106      	bne.n	8003e4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f841 	bl	8003ed0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f000 fb23 	bl	80044ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <HAL_TIM_PWM_Start+0x24>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e03c      	b.n	8003f82 <HAL_TIM_PWM_Start+0x9e>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d109      	bne.n	8003f22 <HAL_TIM_PWM_Start+0x3e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	bf14      	ite	ne
 8003f1a:	2301      	movne	r3, #1
 8003f1c:	2300      	moveq	r3, #0
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	e02f      	b.n	8003f82 <HAL_TIM_PWM_Start+0x9e>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d109      	bne.n	8003f3c <HAL_TIM_PWM_Start+0x58>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	bf14      	ite	ne
 8003f34:	2301      	movne	r3, #1
 8003f36:	2300      	moveq	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e022      	b.n	8003f82 <HAL_TIM_PWM_Start+0x9e>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d109      	bne.n	8003f56 <HAL_TIM_PWM_Start+0x72>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	bf14      	ite	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	2300      	moveq	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	e015      	b.n	8003f82 <HAL_TIM_PWM_Start+0x9e>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d109      	bne.n	8003f70 <HAL_TIM_PWM_Start+0x8c>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	bf14      	ite	ne
 8003f68:	2301      	movne	r3, #1
 8003f6a:	2300      	moveq	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e008      	b.n	8003f82 <HAL_TIM_PWM_Start+0x9e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	bf14      	ite	ne
 8003f7c:	2301      	movne	r3, #1
 8003f7e:	2300      	moveq	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e09c      	b.n	80040c4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d104      	bne.n	8003f9a <HAL_TIM_PWM_Start+0xb6>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f98:	e023      	b.n	8003fe2 <HAL_TIM_PWM_Start+0xfe>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d104      	bne.n	8003faa <HAL_TIM_PWM_Start+0xc6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa8:	e01b      	b.n	8003fe2 <HAL_TIM_PWM_Start+0xfe>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_PWM_Start+0xd6>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb8:	e013      	b.n	8003fe2 <HAL_TIM_PWM_Start+0xfe>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b0c      	cmp	r3, #12
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_PWM_Start+0xe6>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fc8:	e00b      	b.n	8003fe2 <HAL_TIM_PWM_Start+0xfe>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_PWM_Start+0xf6>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd8:	e003      	b.n	8003fe2 <HAL_TIM_PWM_Start+0xfe>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	6839      	ldr	r1, [r7, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fe68 	bl	8004cc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a35      	ldr	r2, [pc, #212]	; (80040cc <HAL_TIM_PWM_Start+0x1e8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_TIM_PWM_Start+0x13e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a34      	ldr	r2, [pc, #208]	; (80040d0 <HAL_TIM_PWM_Start+0x1ec>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <HAL_TIM_PWM_Start+0x13e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a32      	ldr	r2, [pc, #200]	; (80040d4 <HAL_TIM_PWM_Start+0x1f0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_TIM_PWM_Start+0x13e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a31      	ldr	r2, [pc, #196]	; (80040d8 <HAL_TIM_PWM_Start+0x1f4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_TIM_PWM_Start+0x13e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <HAL_TIM_PWM_Start+0x1f8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <HAL_TIM_PWM_Start+0x142>
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <HAL_TIM_PWM_Start+0x144>
 8004026:	2300      	movs	r3, #0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800403a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a22      	ldr	r2, [pc, #136]	; (80040cc <HAL_TIM_PWM_Start+0x1e8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01d      	beq.n	8004082 <HAL_TIM_PWM_Start+0x19e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404e:	d018      	beq.n	8004082 <HAL_TIM_PWM_Start+0x19e>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a22      	ldr	r2, [pc, #136]	; (80040e0 <HAL_TIM_PWM_Start+0x1fc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <HAL_TIM_PWM_Start+0x19e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a21      	ldr	r2, [pc, #132]	; (80040e4 <HAL_TIM_PWM_Start+0x200>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00e      	beq.n	8004082 <HAL_TIM_PWM_Start+0x19e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1f      	ldr	r2, [pc, #124]	; (80040e8 <HAL_TIM_PWM_Start+0x204>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d009      	beq.n	8004082 <HAL_TIM_PWM_Start+0x19e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a17      	ldr	r2, [pc, #92]	; (80040d0 <HAL_TIM_PWM_Start+0x1ec>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <HAL_TIM_PWM_Start+0x19e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <HAL_TIM_PWM_Start+0x1f0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d115      	bne.n	80040ae <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	4b18      	ldr	r3, [pc, #96]	; (80040ec <HAL_TIM_PWM_Start+0x208>)
 800408a:	4013      	ands	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b06      	cmp	r3, #6
 8004092:	d015      	beq.n	80040c0 <HAL_TIM_PWM_Start+0x1dc>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409a:	d011      	beq.n	80040c0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ac:	e008      	b.n	80040c0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	e000      	b.n	80040c2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40013400 	.word	0x40013400
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	00010007 	.word	0x00010007

080040f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800410a:	2302      	movs	r3, #2
 800410c:	e0ff      	b.n	800430e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b14      	cmp	r3, #20
 800411a:	f200 80f0 	bhi.w	80042fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800411e:	a201      	add	r2, pc, #4	; (adr r2, 8004124 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004124:	08004179 	.word	0x08004179
 8004128:	080042ff 	.word	0x080042ff
 800412c:	080042ff 	.word	0x080042ff
 8004130:	080042ff 	.word	0x080042ff
 8004134:	080041b9 	.word	0x080041b9
 8004138:	080042ff 	.word	0x080042ff
 800413c:	080042ff 	.word	0x080042ff
 8004140:	080042ff 	.word	0x080042ff
 8004144:	080041fb 	.word	0x080041fb
 8004148:	080042ff 	.word	0x080042ff
 800414c:	080042ff 	.word	0x080042ff
 8004150:	080042ff 	.word	0x080042ff
 8004154:	0800423b 	.word	0x0800423b
 8004158:	080042ff 	.word	0x080042ff
 800415c:	080042ff 	.word	0x080042ff
 8004160:	080042ff 	.word	0x080042ff
 8004164:	0800427d 	.word	0x0800427d
 8004168:	080042ff 	.word	0x080042ff
 800416c:	080042ff 	.word	0x080042ff
 8004170:	080042ff 	.word	0x080042ff
 8004174:	080042bd 	.word	0x080042bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fa2e 	bl	80045e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0208 	orr.w	r2, r2, #8
 8004192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0204 	bic.w	r2, r2, #4
 80041a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6999      	ldr	r1, [r3, #24]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	619a      	str	r2, [r3, #24]
      break;
 80041b6:	e0a5      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fa9e 	bl	8004700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6999      	ldr	r1, [r3, #24]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	619a      	str	r2, [r3, #24]
      break;
 80041f8:	e084      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fb07 	bl	8004814 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0208 	orr.w	r2, r2, #8
 8004214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0204 	bic.w	r2, r2, #4
 8004224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69d9      	ldr	r1, [r3, #28]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	61da      	str	r2, [r3, #28]
      break;
 8004238:	e064      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fb6f 	bl	8004924 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69d9      	ldr	r1, [r3, #28]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	021a      	lsls	r2, r3, #8
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	61da      	str	r2, [r3, #28]
      break;
 800427a:	e043      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fbb8 	bl	80049f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0208 	orr.w	r2, r2, #8
 8004296:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0204 	bic.w	r2, r2, #4
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042ba:	e023      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fbfc 	bl	8004ac0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	021a      	lsls	r2, r3, #8
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042fc:	e002      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
      break;
 8004302:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800430c:	7dfb      	ldrb	r3, [r7, #23]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop

08004318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_TIM_ConfigClockSource+0x1c>
 8004330:	2302      	movs	r3, #2
 8004332:	e0b6      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x18a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004352:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800435e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004370:	d03e      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0xd8>
 8004372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004376:	f200 8087 	bhi.w	8004488 <HAL_TIM_ConfigClockSource+0x170>
 800437a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437e:	f000 8086 	beq.w	800448e <HAL_TIM_ConfigClockSource+0x176>
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004386:	d87f      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x170>
 8004388:	2b70      	cmp	r3, #112	; 0x70
 800438a:	d01a      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0xaa>
 800438c:	2b70      	cmp	r3, #112	; 0x70
 800438e:	d87b      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x170>
 8004390:	2b60      	cmp	r3, #96	; 0x60
 8004392:	d050      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0x11e>
 8004394:	2b60      	cmp	r3, #96	; 0x60
 8004396:	d877      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x170>
 8004398:	2b50      	cmp	r3, #80	; 0x50
 800439a:	d03c      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0xfe>
 800439c:	2b50      	cmp	r3, #80	; 0x50
 800439e:	d873      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x170>
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d058      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x13e>
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d86f      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x170>
 80043a8:	2b30      	cmp	r3, #48	; 0x30
 80043aa:	d064      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15e>
 80043ac:	2b30      	cmp	r3, #48	; 0x30
 80043ae:	d86b      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x170>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d060      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15e>
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d867      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x170>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d05c      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15e>
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d05a      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15e>
 80043c0:	e062      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6899      	ldr	r1, [r3, #8]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f000 fc55 	bl	8004c80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	609a      	str	r2, [r3, #8]
      break;
 80043ee:	e04f      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6899      	ldr	r1, [r3, #8]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f000 fc3e 	bl	8004c80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004412:	609a      	str	r2, [r3, #8]
      break;
 8004414:	e03c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6859      	ldr	r1, [r3, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	461a      	mov	r2, r3
 8004424:	f000 fbb2 	bl	8004b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2150      	movs	r1, #80	; 0x50
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fc0b 	bl	8004c4a <TIM_ITRx_SetConfig>
      break;
 8004434:	e02c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	461a      	mov	r2, r3
 8004444:	f000 fbd1 	bl	8004bea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2160      	movs	r1, #96	; 0x60
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fbfb 	bl	8004c4a <TIM_ITRx_SetConfig>
      break;
 8004454:	e01c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	461a      	mov	r2, r3
 8004464:	f000 fb92 	bl	8004b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2140      	movs	r1, #64	; 0x40
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fbeb 	bl	8004c4a <TIM_ITRx_SetConfig>
      break;
 8004474:	e00c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4619      	mov	r1, r3
 8004480:	4610      	mov	r0, r2
 8004482:	f000 fbe2 	bl	8004c4a <TIM_ITRx_SetConfig>
      break;
 8004486:	e003      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
      break;
 800448c:	e000      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800448e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a40      	ldr	r2, [pc, #256]	; (80045c0 <TIM_Base_SetConfig+0x114>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <TIM_Base_SetConfig+0x40>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ca:	d00f      	beq.n	80044ec <TIM_Base_SetConfig+0x40>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a3d      	ldr	r2, [pc, #244]	; (80045c4 <TIM_Base_SetConfig+0x118>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00b      	beq.n	80044ec <TIM_Base_SetConfig+0x40>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a3c      	ldr	r2, [pc, #240]	; (80045c8 <TIM_Base_SetConfig+0x11c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d007      	beq.n	80044ec <TIM_Base_SetConfig+0x40>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a3b      	ldr	r2, [pc, #236]	; (80045cc <TIM_Base_SetConfig+0x120>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a3a      	ldr	r2, [pc, #232]	; (80045d0 <TIM_Base_SetConfig+0x124>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d108      	bne.n	80044fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a2f      	ldr	r2, [pc, #188]	; (80045c0 <TIM_Base_SetConfig+0x114>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01f      	beq.n	8004546 <TIM_Base_SetConfig+0x9a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450c:	d01b      	beq.n	8004546 <TIM_Base_SetConfig+0x9a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a2c      	ldr	r2, [pc, #176]	; (80045c4 <TIM_Base_SetConfig+0x118>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d017      	beq.n	8004546 <TIM_Base_SetConfig+0x9a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a2b      	ldr	r2, [pc, #172]	; (80045c8 <TIM_Base_SetConfig+0x11c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <TIM_Base_SetConfig+0x9a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2a      	ldr	r2, [pc, #168]	; (80045cc <TIM_Base_SetConfig+0x120>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00f      	beq.n	8004546 <TIM_Base_SetConfig+0x9a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a29      	ldr	r2, [pc, #164]	; (80045d0 <TIM_Base_SetConfig+0x124>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00b      	beq.n	8004546 <TIM_Base_SetConfig+0x9a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a28      	ldr	r2, [pc, #160]	; (80045d4 <TIM_Base_SetConfig+0x128>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d007      	beq.n	8004546 <TIM_Base_SetConfig+0x9a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a27      	ldr	r2, [pc, #156]	; (80045d8 <TIM_Base_SetConfig+0x12c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_Base_SetConfig+0x9a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a26      	ldr	r2, [pc, #152]	; (80045dc <TIM_Base_SetConfig+0x130>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d108      	bne.n	8004558 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a10      	ldr	r2, [pc, #64]	; (80045c0 <TIM_Base_SetConfig+0x114>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00f      	beq.n	80045a4 <TIM_Base_SetConfig+0xf8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a12      	ldr	r2, [pc, #72]	; (80045d0 <TIM_Base_SetConfig+0x124>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00b      	beq.n	80045a4 <TIM_Base_SetConfig+0xf8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a11      	ldr	r2, [pc, #68]	; (80045d4 <TIM_Base_SetConfig+0x128>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d007      	beq.n	80045a4 <TIM_Base_SetConfig+0xf8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a10      	ldr	r2, [pc, #64]	; (80045d8 <TIM_Base_SetConfig+0x12c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d003      	beq.n	80045a4 <TIM_Base_SetConfig+0xf8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a0f      	ldr	r2, [pc, #60]	; (80045dc <TIM_Base_SetConfig+0x130>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d103      	bne.n	80045ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	615a      	str	r2, [r3, #20]
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800
 80045cc:	40000c00 	.word	0x40000c00
 80045d0:	40013400 	.word	0x40013400
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400
 80045dc:	40014800 	.word	0x40014800

080045e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f023 0201 	bic.w	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800460e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0303 	bic.w	r3, r3, #3
 800461a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f023 0302 	bic.w	r3, r3, #2
 800462c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a2c      	ldr	r2, [pc, #176]	; (80046ec <TIM_OC1_SetConfig+0x10c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00f      	beq.n	8004660 <TIM_OC1_SetConfig+0x80>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a2b      	ldr	r2, [pc, #172]	; (80046f0 <TIM_OC1_SetConfig+0x110>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00b      	beq.n	8004660 <TIM_OC1_SetConfig+0x80>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <TIM_OC1_SetConfig+0x114>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <TIM_OC1_SetConfig+0x80>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a29      	ldr	r2, [pc, #164]	; (80046f8 <TIM_OC1_SetConfig+0x118>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_OC1_SetConfig+0x80>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a28      	ldr	r2, [pc, #160]	; (80046fc <TIM_OC1_SetConfig+0x11c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d10c      	bne.n	800467a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f023 0308 	bic.w	r3, r3, #8
 8004666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f023 0304 	bic.w	r3, r3, #4
 8004678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <TIM_OC1_SetConfig+0x10c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00f      	beq.n	80046a2 <TIM_OC1_SetConfig+0xc2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a1a      	ldr	r2, [pc, #104]	; (80046f0 <TIM_OC1_SetConfig+0x110>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00b      	beq.n	80046a2 <TIM_OC1_SetConfig+0xc2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a19      	ldr	r2, [pc, #100]	; (80046f4 <TIM_OC1_SetConfig+0x114>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d007      	beq.n	80046a2 <TIM_OC1_SetConfig+0xc2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a18      	ldr	r2, [pc, #96]	; (80046f8 <TIM_OC1_SetConfig+0x118>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d003      	beq.n	80046a2 <TIM_OC1_SetConfig+0xc2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a17      	ldr	r2, [pc, #92]	; (80046fc <TIM_OC1_SetConfig+0x11c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d111      	bne.n	80046c6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	621a      	str	r2, [r3, #32]
}
 80046e0:	bf00      	nop
 80046e2:	371c      	adds	r7, #28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	40013400 	.word	0x40013400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800

08004700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f023 0210 	bic.w	r2, r3, #16
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f023 0320 	bic.w	r3, r3, #32
 800474e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a28      	ldr	r2, [pc, #160]	; (8004800 <TIM_OC2_SetConfig+0x100>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_OC2_SetConfig+0x6c>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a27      	ldr	r2, [pc, #156]	; (8004804 <TIM_OC2_SetConfig+0x104>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d10d      	bne.n	8004788 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a1d      	ldr	r2, [pc, #116]	; (8004800 <TIM_OC2_SetConfig+0x100>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00f      	beq.n	80047b0 <TIM_OC2_SetConfig+0xb0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a1c      	ldr	r2, [pc, #112]	; (8004804 <TIM_OC2_SetConfig+0x104>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00b      	beq.n	80047b0 <TIM_OC2_SetConfig+0xb0>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <TIM_OC2_SetConfig+0x108>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d007      	beq.n	80047b0 <TIM_OC2_SetConfig+0xb0>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a1a      	ldr	r2, [pc, #104]	; (800480c <TIM_OC2_SetConfig+0x10c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d003      	beq.n	80047b0 <TIM_OC2_SetConfig+0xb0>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a19      	ldr	r2, [pc, #100]	; (8004810 <TIM_OC2_SetConfig+0x110>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d113      	bne.n	80047d8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40012c00 	.word	0x40012c00
 8004804:	40013400 	.word	0x40013400
 8004808:	40014000 	.word	0x40014000
 800480c:	40014400 	.word	0x40014400
 8004810:	40014800 	.word	0x40014800

08004814 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0303 	bic.w	r3, r3, #3
 800484e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a27      	ldr	r2, [pc, #156]	; (8004910 <TIM_OC3_SetConfig+0xfc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_OC3_SetConfig+0x6a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a26      	ldr	r2, [pc, #152]	; (8004914 <TIM_OC3_SetConfig+0x100>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10d      	bne.n	800489a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1c      	ldr	r2, [pc, #112]	; (8004910 <TIM_OC3_SetConfig+0xfc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00f      	beq.n	80048c2 <TIM_OC3_SetConfig+0xae>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a1b      	ldr	r2, [pc, #108]	; (8004914 <TIM_OC3_SetConfig+0x100>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00b      	beq.n	80048c2 <TIM_OC3_SetConfig+0xae>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a1a      	ldr	r2, [pc, #104]	; (8004918 <TIM_OC3_SetConfig+0x104>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <TIM_OC3_SetConfig+0xae>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a19      	ldr	r2, [pc, #100]	; (800491c <TIM_OC3_SetConfig+0x108>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_OC3_SetConfig+0xae>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a18      	ldr	r2, [pc, #96]	; (8004920 <TIM_OC3_SetConfig+0x10c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d113      	bne.n	80048ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	621a      	str	r2, [r3, #32]
}
 8004904:	bf00      	nop
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	40012c00 	.word	0x40012c00
 8004914:	40013400 	.word	0x40013400
 8004918:	40014000 	.word	0x40014000
 800491c:	40014400 	.word	0x40014400
 8004920:	40014800 	.word	0x40014800

08004924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	031b      	lsls	r3, r3, #12
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <TIM_OC4_SetConfig+0xc0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00f      	beq.n	80049a8 <TIM_OC4_SetConfig+0x84>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <TIM_OC4_SetConfig+0xc4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00b      	beq.n	80049a8 <TIM_OC4_SetConfig+0x84>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <TIM_OC4_SetConfig+0xc8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d007      	beq.n	80049a8 <TIM_OC4_SetConfig+0x84>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a15      	ldr	r2, [pc, #84]	; (80049f0 <TIM_OC4_SetConfig+0xcc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d003      	beq.n	80049a8 <TIM_OC4_SetConfig+0x84>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a14      	ldr	r2, [pc, #80]	; (80049f4 <TIM_OC4_SetConfig+0xd0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d109      	bne.n	80049bc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	019b      	lsls	r3, r3, #6
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	621a      	str	r2, [r3, #32]
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40013400 	.word	0x40013400
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40014400 	.word	0x40014400
 80049f4:	40014800 	.word	0x40014800

080049f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a17      	ldr	r2, [pc, #92]	; (8004aac <TIM_OC5_SetConfig+0xb4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00f      	beq.n	8004a72 <TIM_OC5_SetConfig+0x7a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a16      	ldr	r2, [pc, #88]	; (8004ab0 <TIM_OC5_SetConfig+0xb8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00b      	beq.n	8004a72 <TIM_OC5_SetConfig+0x7a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <TIM_OC5_SetConfig+0xbc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <TIM_OC5_SetConfig+0x7a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <TIM_OC5_SetConfig+0xc0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_OC5_SetConfig+0x7a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a13      	ldr	r2, [pc, #76]	; (8004abc <TIM_OC5_SetConfig+0xc4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d109      	bne.n	8004a86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40013400 	.word	0x40013400
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40014400 	.word	0x40014400
 8004abc:	40014800 	.word	0x40014800

08004ac0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	051b      	lsls	r3, r3, #20
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a18      	ldr	r2, [pc, #96]	; (8004b78 <TIM_OC6_SetConfig+0xb8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00f      	beq.n	8004b3c <TIM_OC6_SetConfig+0x7c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a17      	ldr	r2, [pc, #92]	; (8004b7c <TIM_OC6_SetConfig+0xbc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00b      	beq.n	8004b3c <TIM_OC6_SetConfig+0x7c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a16      	ldr	r2, [pc, #88]	; (8004b80 <TIM_OC6_SetConfig+0xc0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d007      	beq.n	8004b3c <TIM_OC6_SetConfig+0x7c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <TIM_OC6_SetConfig+0xc4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_OC6_SetConfig+0x7c>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a14      	ldr	r2, [pc, #80]	; (8004b88 <TIM_OC6_SetConfig+0xc8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d109      	bne.n	8004b50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	029b      	lsls	r3, r3, #10
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40013400 	.word	0x40013400
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40014400 	.word	0x40014400
 8004b88:	40014800 	.word	0x40014800

08004b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f023 0201 	bic.w	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f023 030a 	bic.w	r3, r3, #10
 8004bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b087      	sub	sp, #28
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f023 0210 	bic.w	r2, r3, #16
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	031b      	lsls	r3, r3, #12
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f043 0307 	orr.w	r3, r3, #7
 8004c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	609a      	str	r2, [r3, #8]
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	021a      	lsls	r2, r3, #8
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	609a      	str	r2, [r3, #8]
}
 8004cb4:	bf00      	nop
 8004cb6:	371c      	adds	r7, #28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a1a      	ldr	r2, [r3, #32]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1a      	ldr	r2, [r3, #32]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e068      	b.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a2e      	ldr	r2, [pc, #184]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a2d      	ldr	r2, [pc, #180]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d108      	bne.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d01d      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d96:	d018      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1b      	ldr	r2, [pc, #108]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1a      	ldr	r2, [pc, #104]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00e      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a18      	ldr	r2, [pc, #96]	; (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d009      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d004      	beq.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d10c      	bne.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40013400 	.word	0x40013400
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40014000 	.word	0x40014000

08004e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e040      	b.n	8004eb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fc f906 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2224      	movs	r2, #36	; 0x24
 8004e48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0201 	bic.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f8c0 	bl	8004fe0 <UART_SetConfig>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e022      	b.n	8004eb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fb3e 	bl	80054f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fbc5 	bl	8005638 <UART_CheckIdleState>
 8004eae:	4603      	mov	r3, r0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	; 0x28
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	f040 8082 	bne.w	8004fd6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <HAL_UART_Transmit+0x26>
 8004ed8:	88fb      	ldrh	r3, [r7, #6]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e07a      	b.n	8004fd8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_UART_Transmit+0x38>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e073      	b.n	8004fd8 <HAL_UART_Transmit+0x120>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2221      	movs	r2, #33	; 0x21
 8004f04:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f06:	f7fc fa57 	bl	80013b8 <HAL_GetTick>
 8004f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	88fa      	ldrh	r2, [r7, #6]
 8004f18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f24:	d108      	bne.n	8004f38 <HAL_UART_Transmit+0x80>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d104      	bne.n	8004f38 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	e003      	b.n	8004f40 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f48:	e02d      	b.n	8004fa6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2200      	movs	r2, #0
 8004f52:	2180      	movs	r1, #128	; 0x80
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 fbb8 	bl	80056ca <UART_WaitOnFlagUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e039      	b.n	8004fd8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10b      	bne.n	8004f82 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	881a      	ldrh	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f76:	b292      	uxth	r2, r2
 8004f78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	61bb      	str	r3, [r7, #24]
 8004f80:	e008      	b.n	8004f94 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	781a      	ldrb	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	b292      	uxth	r2, r2
 8004f8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3301      	adds	r3, #1
 8004f92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1cb      	bne.n	8004f4a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2140      	movs	r1, #64	; 0x40
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 fb84 	bl	80056ca <UART_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e005      	b.n	8004fd8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e000      	b.n	8004fd8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe0:	b5b0      	push	{r4, r5, r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	4313      	orrs	r3, r2
 8005002:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4bad      	ldr	r3, [pc, #692]	; (80052c0 <UART_SetConfig+0x2e0>)
 800500c:	4013      	ands	r3, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	69f9      	ldr	r1, [r7, #28]
 8005014:	430b      	orrs	r3, r1
 8005016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4aa2      	ldr	r2, [pc, #648]	; (80052c4 <UART_SetConfig+0x2e4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d004      	beq.n	8005048 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	4313      	orrs	r3, r2
 8005046:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	430a      	orrs	r2, r1
 800505a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a99      	ldr	r2, [pc, #612]	; (80052c8 <UART_SetConfig+0x2e8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d121      	bne.n	80050aa <UART_SetConfig+0xca>
 8005066:	4b99      	ldr	r3, [pc, #612]	; (80052cc <UART_SetConfig+0x2ec>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	2b03      	cmp	r3, #3
 8005072:	d817      	bhi.n	80050a4 <UART_SetConfig+0xc4>
 8005074:	a201      	add	r2, pc, #4	; (adr r2, 800507c <UART_SetConfig+0x9c>)
 8005076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507a:	bf00      	nop
 800507c:	0800508d 	.word	0x0800508d
 8005080:	08005099 	.word	0x08005099
 8005084:	08005093 	.word	0x08005093
 8005088:	0800509f 	.word	0x0800509f
 800508c:	2301      	movs	r3, #1
 800508e:	76fb      	strb	r3, [r7, #27]
 8005090:	e0e7      	b.n	8005262 <UART_SetConfig+0x282>
 8005092:	2302      	movs	r3, #2
 8005094:	76fb      	strb	r3, [r7, #27]
 8005096:	e0e4      	b.n	8005262 <UART_SetConfig+0x282>
 8005098:	2304      	movs	r3, #4
 800509a:	76fb      	strb	r3, [r7, #27]
 800509c:	e0e1      	b.n	8005262 <UART_SetConfig+0x282>
 800509e:	2308      	movs	r3, #8
 80050a0:	76fb      	strb	r3, [r7, #27]
 80050a2:	e0de      	b.n	8005262 <UART_SetConfig+0x282>
 80050a4:	2310      	movs	r3, #16
 80050a6:	76fb      	strb	r3, [r7, #27]
 80050a8:	e0db      	b.n	8005262 <UART_SetConfig+0x282>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a88      	ldr	r2, [pc, #544]	; (80052d0 <UART_SetConfig+0x2f0>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d132      	bne.n	800511a <UART_SetConfig+0x13a>
 80050b4:	4b85      	ldr	r3, [pc, #532]	; (80052cc <UART_SetConfig+0x2ec>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	f003 030c 	and.w	r3, r3, #12
 80050be:	2b0c      	cmp	r3, #12
 80050c0:	d828      	bhi.n	8005114 <UART_SetConfig+0x134>
 80050c2:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <UART_SetConfig+0xe8>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	080050fd 	.word	0x080050fd
 80050cc:	08005115 	.word	0x08005115
 80050d0:	08005115 	.word	0x08005115
 80050d4:	08005115 	.word	0x08005115
 80050d8:	08005109 	.word	0x08005109
 80050dc:	08005115 	.word	0x08005115
 80050e0:	08005115 	.word	0x08005115
 80050e4:	08005115 	.word	0x08005115
 80050e8:	08005103 	.word	0x08005103
 80050ec:	08005115 	.word	0x08005115
 80050f0:	08005115 	.word	0x08005115
 80050f4:	08005115 	.word	0x08005115
 80050f8:	0800510f 	.word	0x0800510f
 80050fc:	2300      	movs	r3, #0
 80050fe:	76fb      	strb	r3, [r7, #27]
 8005100:	e0af      	b.n	8005262 <UART_SetConfig+0x282>
 8005102:	2302      	movs	r3, #2
 8005104:	76fb      	strb	r3, [r7, #27]
 8005106:	e0ac      	b.n	8005262 <UART_SetConfig+0x282>
 8005108:	2304      	movs	r3, #4
 800510a:	76fb      	strb	r3, [r7, #27]
 800510c:	e0a9      	b.n	8005262 <UART_SetConfig+0x282>
 800510e:	2308      	movs	r3, #8
 8005110:	76fb      	strb	r3, [r7, #27]
 8005112:	e0a6      	b.n	8005262 <UART_SetConfig+0x282>
 8005114:	2310      	movs	r3, #16
 8005116:	76fb      	strb	r3, [r7, #27]
 8005118:	e0a3      	b.n	8005262 <UART_SetConfig+0x282>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a6d      	ldr	r2, [pc, #436]	; (80052d4 <UART_SetConfig+0x2f4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d120      	bne.n	8005166 <UART_SetConfig+0x186>
 8005124:	4b69      	ldr	r3, [pc, #420]	; (80052cc <UART_SetConfig+0x2ec>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800512e:	2b30      	cmp	r3, #48	; 0x30
 8005130:	d013      	beq.n	800515a <UART_SetConfig+0x17a>
 8005132:	2b30      	cmp	r3, #48	; 0x30
 8005134:	d814      	bhi.n	8005160 <UART_SetConfig+0x180>
 8005136:	2b20      	cmp	r3, #32
 8005138:	d009      	beq.n	800514e <UART_SetConfig+0x16e>
 800513a:	2b20      	cmp	r3, #32
 800513c:	d810      	bhi.n	8005160 <UART_SetConfig+0x180>
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <UART_SetConfig+0x168>
 8005142:	2b10      	cmp	r3, #16
 8005144:	d006      	beq.n	8005154 <UART_SetConfig+0x174>
 8005146:	e00b      	b.n	8005160 <UART_SetConfig+0x180>
 8005148:	2300      	movs	r3, #0
 800514a:	76fb      	strb	r3, [r7, #27]
 800514c:	e089      	b.n	8005262 <UART_SetConfig+0x282>
 800514e:	2302      	movs	r3, #2
 8005150:	76fb      	strb	r3, [r7, #27]
 8005152:	e086      	b.n	8005262 <UART_SetConfig+0x282>
 8005154:	2304      	movs	r3, #4
 8005156:	76fb      	strb	r3, [r7, #27]
 8005158:	e083      	b.n	8005262 <UART_SetConfig+0x282>
 800515a:	2308      	movs	r3, #8
 800515c:	76fb      	strb	r3, [r7, #27]
 800515e:	e080      	b.n	8005262 <UART_SetConfig+0x282>
 8005160:	2310      	movs	r3, #16
 8005162:	76fb      	strb	r3, [r7, #27]
 8005164:	e07d      	b.n	8005262 <UART_SetConfig+0x282>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a5b      	ldr	r2, [pc, #364]	; (80052d8 <UART_SetConfig+0x2f8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d120      	bne.n	80051b2 <UART_SetConfig+0x1d2>
 8005170:	4b56      	ldr	r3, [pc, #344]	; (80052cc <UART_SetConfig+0x2ec>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800517a:	2bc0      	cmp	r3, #192	; 0xc0
 800517c:	d013      	beq.n	80051a6 <UART_SetConfig+0x1c6>
 800517e:	2bc0      	cmp	r3, #192	; 0xc0
 8005180:	d814      	bhi.n	80051ac <UART_SetConfig+0x1cc>
 8005182:	2b80      	cmp	r3, #128	; 0x80
 8005184:	d009      	beq.n	800519a <UART_SetConfig+0x1ba>
 8005186:	2b80      	cmp	r3, #128	; 0x80
 8005188:	d810      	bhi.n	80051ac <UART_SetConfig+0x1cc>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <UART_SetConfig+0x1b4>
 800518e:	2b40      	cmp	r3, #64	; 0x40
 8005190:	d006      	beq.n	80051a0 <UART_SetConfig+0x1c0>
 8005192:	e00b      	b.n	80051ac <UART_SetConfig+0x1cc>
 8005194:	2300      	movs	r3, #0
 8005196:	76fb      	strb	r3, [r7, #27]
 8005198:	e063      	b.n	8005262 <UART_SetConfig+0x282>
 800519a:	2302      	movs	r3, #2
 800519c:	76fb      	strb	r3, [r7, #27]
 800519e:	e060      	b.n	8005262 <UART_SetConfig+0x282>
 80051a0:	2304      	movs	r3, #4
 80051a2:	76fb      	strb	r3, [r7, #27]
 80051a4:	e05d      	b.n	8005262 <UART_SetConfig+0x282>
 80051a6:	2308      	movs	r3, #8
 80051a8:	76fb      	strb	r3, [r7, #27]
 80051aa:	e05a      	b.n	8005262 <UART_SetConfig+0x282>
 80051ac:	2310      	movs	r3, #16
 80051ae:	76fb      	strb	r3, [r7, #27]
 80051b0:	e057      	b.n	8005262 <UART_SetConfig+0x282>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a49      	ldr	r2, [pc, #292]	; (80052dc <UART_SetConfig+0x2fc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d125      	bne.n	8005208 <UART_SetConfig+0x228>
 80051bc:	4b43      	ldr	r3, [pc, #268]	; (80052cc <UART_SetConfig+0x2ec>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ca:	d017      	beq.n	80051fc <UART_SetConfig+0x21c>
 80051cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d0:	d817      	bhi.n	8005202 <UART_SetConfig+0x222>
 80051d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d6:	d00b      	beq.n	80051f0 <UART_SetConfig+0x210>
 80051d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051dc:	d811      	bhi.n	8005202 <UART_SetConfig+0x222>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <UART_SetConfig+0x20a>
 80051e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e6:	d006      	beq.n	80051f6 <UART_SetConfig+0x216>
 80051e8:	e00b      	b.n	8005202 <UART_SetConfig+0x222>
 80051ea:	2300      	movs	r3, #0
 80051ec:	76fb      	strb	r3, [r7, #27]
 80051ee:	e038      	b.n	8005262 <UART_SetConfig+0x282>
 80051f0:	2302      	movs	r3, #2
 80051f2:	76fb      	strb	r3, [r7, #27]
 80051f4:	e035      	b.n	8005262 <UART_SetConfig+0x282>
 80051f6:	2304      	movs	r3, #4
 80051f8:	76fb      	strb	r3, [r7, #27]
 80051fa:	e032      	b.n	8005262 <UART_SetConfig+0x282>
 80051fc:	2308      	movs	r3, #8
 80051fe:	76fb      	strb	r3, [r7, #27]
 8005200:	e02f      	b.n	8005262 <UART_SetConfig+0x282>
 8005202:	2310      	movs	r3, #16
 8005204:	76fb      	strb	r3, [r7, #27]
 8005206:	e02c      	b.n	8005262 <UART_SetConfig+0x282>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a2d      	ldr	r2, [pc, #180]	; (80052c4 <UART_SetConfig+0x2e4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d125      	bne.n	800525e <UART_SetConfig+0x27e>
 8005212:	4b2e      	ldr	r3, [pc, #184]	; (80052cc <UART_SetConfig+0x2ec>)
 8005214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005218:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800521c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005220:	d017      	beq.n	8005252 <UART_SetConfig+0x272>
 8005222:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005226:	d817      	bhi.n	8005258 <UART_SetConfig+0x278>
 8005228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522c:	d00b      	beq.n	8005246 <UART_SetConfig+0x266>
 800522e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005232:	d811      	bhi.n	8005258 <UART_SetConfig+0x278>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <UART_SetConfig+0x260>
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523c:	d006      	beq.n	800524c <UART_SetConfig+0x26c>
 800523e:	e00b      	b.n	8005258 <UART_SetConfig+0x278>
 8005240:	2300      	movs	r3, #0
 8005242:	76fb      	strb	r3, [r7, #27]
 8005244:	e00d      	b.n	8005262 <UART_SetConfig+0x282>
 8005246:	2302      	movs	r3, #2
 8005248:	76fb      	strb	r3, [r7, #27]
 800524a:	e00a      	b.n	8005262 <UART_SetConfig+0x282>
 800524c:	2304      	movs	r3, #4
 800524e:	76fb      	strb	r3, [r7, #27]
 8005250:	e007      	b.n	8005262 <UART_SetConfig+0x282>
 8005252:	2308      	movs	r3, #8
 8005254:	76fb      	strb	r3, [r7, #27]
 8005256:	e004      	b.n	8005262 <UART_SetConfig+0x282>
 8005258:	2310      	movs	r3, #16
 800525a:	76fb      	strb	r3, [r7, #27]
 800525c:	e001      	b.n	8005262 <UART_SetConfig+0x282>
 800525e:	2310      	movs	r3, #16
 8005260:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a17      	ldr	r2, [pc, #92]	; (80052c4 <UART_SetConfig+0x2e4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	f040 8087 	bne.w	800537c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800526e:	7efb      	ldrb	r3, [r7, #27]
 8005270:	2b08      	cmp	r3, #8
 8005272:	d837      	bhi.n	80052e4 <UART_SetConfig+0x304>
 8005274:	a201      	add	r2, pc, #4	; (adr r2, 800527c <UART_SetConfig+0x29c>)
 8005276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527a:	bf00      	nop
 800527c:	080052a1 	.word	0x080052a1
 8005280:	080052e5 	.word	0x080052e5
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052e5 	.word	0x080052e5
 800528c:	080052af 	.word	0x080052af
 8005290:	080052e5 	.word	0x080052e5
 8005294:	080052e5 	.word	0x080052e5
 8005298:	080052e5 	.word	0x080052e5
 800529c:	080052b7 	.word	0x080052b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a0:	f7fe f820 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 80052a4:	6178      	str	r0, [r7, #20]
        break;
 80052a6:	e022      	b.n	80052ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a8:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <UART_SetConfig+0x300>)
 80052aa:	617b      	str	r3, [r7, #20]
        break;
 80052ac:	e01f      	b.n	80052ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ae:	f7fd ff81 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 80052b2:	6178      	str	r0, [r7, #20]
        break;
 80052b4:	e01b      	b.n	80052ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ba:	617b      	str	r3, [r7, #20]
        break;
 80052bc:	e017      	b.n	80052ee <UART_SetConfig+0x30e>
 80052be:	bf00      	nop
 80052c0:	efff69f3 	.word	0xefff69f3
 80052c4:	40008000 	.word	0x40008000
 80052c8:	40013800 	.word	0x40013800
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40004400 	.word	0x40004400
 80052d4:	40004800 	.word	0x40004800
 80052d8:	40004c00 	.word	0x40004c00
 80052dc:	40005000 	.word	0x40005000
 80052e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	76bb      	strb	r3, [r7, #26]
        break;
 80052ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 80f1 	beq.w	80054d8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	4413      	add	r3, r2
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	429a      	cmp	r2, r3
 8005304:	d305      	bcc.n	8005312 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	429a      	cmp	r2, r3
 8005310:	d902      	bls.n	8005318 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	76bb      	strb	r3, [r7, #26]
 8005316:	e0df      	b.n	80054d8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	4618      	mov	r0, r3
 800531c:	f04f 0100 	mov.w	r1, #0
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	020b      	lsls	r3, r1, #8
 800532a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800532e:	0202      	lsls	r2, r0, #8
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	6849      	ldr	r1, [r1, #4]
 8005334:	0849      	lsrs	r1, r1, #1
 8005336:	4608      	mov	r0, r1
 8005338:	f04f 0100 	mov.w	r1, #0
 800533c:	1814      	adds	r4, r2, r0
 800533e:	eb43 0501 	adc.w	r5, r3, r1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	461a      	mov	r2, r3
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	4620      	mov	r0, r4
 800534e:	4629      	mov	r1, r5
 8005350:	f7fa ff8e 	bl	8000270 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4613      	mov	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005362:	d308      	bcc.n	8005376 <UART_SetConfig+0x396>
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800536a:	d204      	bcs.n	8005376 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	60da      	str	r2, [r3, #12]
 8005374:	e0b0      	b.n	80054d8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	76bb      	strb	r3, [r7, #26]
 800537a:	e0ad      	b.n	80054d8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005384:	d15b      	bne.n	800543e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005386:	7efb      	ldrb	r3, [r7, #27]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d828      	bhi.n	80053de <UART_SetConfig+0x3fe>
 800538c:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x3b4>)
 800538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005392:	bf00      	nop
 8005394:	080053b9 	.word	0x080053b9
 8005398:	080053c1 	.word	0x080053c1
 800539c:	080053c9 	.word	0x080053c9
 80053a0:	080053df 	.word	0x080053df
 80053a4:	080053cf 	.word	0x080053cf
 80053a8:	080053df 	.word	0x080053df
 80053ac:	080053df 	.word	0x080053df
 80053b0:	080053df 	.word	0x080053df
 80053b4:	080053d7 	.word	0x080053d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b8:	f7fd ff94 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 80053bc:	6178      	str	r0, [r7, #20]
        break;
 80053be:	e013      	b.n	80053e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c0:	f7fd ffa6 	bl	8003310 <HAL_RCC_GetPCLK2Freq>
 80053c4:	6178      	str	r0, [r7, #20]
        break;
 80053c6:	e00f      	b.n	80053e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c8:	4b49      	ldr	r3, [pc, #292]	; (80054f0 <UART_SetConfig+0x510>)
 80053ca:	617b      	str	r3, [r7, #20]
        break;
 80053cc:	e00c      	b.n	80053e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ce:	f7fd fef1 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 80053d2:	6178      	str	r0, [r7, #20]
        break;
 80053d4:	e008      	b.n	80053e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053da:	617b      	str	r3, [r7, #20]
        break;
 80053dc:	e004      	b.n	80053e8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	76bb      	strb	r3, [r7, #26]
        break;
 80053e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d074      	beq.n	80054d8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	005a      	lsls	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	441a      	add	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b0f      	cmp	r3, #15
 8005408:	d916      	bls.n	8005438 <UART_SetConfig+0x458>
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005410:	d212      	bcs.n	8005438 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	b29b      	uxth	r3, r3
 8005416:	f023 030f 	bic.w	r3, r3, #15
 800541a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	b29b      	uxth	r3, r3
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	b29a      	uxth	r2, r3
 8005428:	89fb      	ldrh	r3, [r7, #14]
 800542a:	4313      	orrs	r3, r2
 800542c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	89fa      	ldrh	r2, [r7, #14]
 8005434:	60da      	str	r2, [r3, #12]
 8005436:	e04f      	b.n	80054d8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	76bb      	strb	r3, [r7, #26]
 800543c:	e04c      	b.n	80054d8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800543e:	7efb      	ldrb	r3, [r7, #27]
 8005440:	2b08      	cmp	r3, #8
 8005442:	d828      	bhi.n	8005496 <UART_SetConfig+0x4b6>
 8005444:	a201      	add	r2, pc, #4	; (adr r2, 800544c <UART_SetConfig+0x46c>)
 8005446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544a:	bf00      	nop
 800544c:	08005471 	.word	0x08005471
 8005450:	08005479 	.word	0x08005479
 8005454:	08005481 	.word	0x08005481
 8005458:	08005497 	.word	0x08005497
 800545c:	08005487 	.word	0x08005487
 8005460:	08005497 	.word	0x08005497
 8005464:	08005497 	.word	0x08005497
 8005468:	08005497 	.word	0x08005497
 800546c:	0800548f 	.word	0x0800548f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005470:	f7fd ff38 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 8005474:	6178      	str	r0, [r7, #20]
        break;
 8005476:	e013      	b.n	80054a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005478:	f7fd ff4a 	bl	8003310 <HAL_RCC_GetPCLK2Freq>
 800547c:	6178      	str	r0, [r7, #20]
        break;
 800547e:	e00f      	b.n	80054a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005480:	4b1b      	ldr	r3, [pc, #108]	; (80054f0 <UART_SetConfig+0x510>)
 8005482:	617b      	str	r3, [r7, #20]
        break;
 8005484:	e00c      	b.n	80054a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005486:	f7fd fe95 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 800548a:	6178      	str	r0, [r7, #20]
        break;
 800548c:	e008      	b.n	80054a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800548e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005492:	617b      	str	r3, [r7, #20]
        break;
 8005494:	e004      	b.n	80054a0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	76bb      	strb	r3, [r7, #26]
        break;
 800549e:	bf00      	nop
    }

    if (pclk != 0U)
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d018      	beq.n	80054d8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	085a      	lsrs	r2, r3, #1
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	441a      	add	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b0f      	cmp	r3, #15
 80054be:	d909      	bls.n	80054d4 <UART_SetConfig+0x4f4>
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c6:	d205      	bcs.n	80054d4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60da      	str	r2, [r3, #12]
 80054d2:	e001      	b.n	80054d8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054e4:	7ebb      	ldrb	r3, [r7, #26]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3720      	adds	r7, #32
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bdb0      	pop	{r4, r5, r7, pc}
 80054ee:	bf00      	nop
 80054f0:	00f42400 	.word	0x00f42400

080054f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01a      	beq.n	800560a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f2:	d10a      	bne.n	800560a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	605a      	str	r2, [r3, #4]
  }
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af02      	add	r7, sp, #8
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005648:	f7fb feb6 	bl	80013b8 <HAL_GetTick>
 800564c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b08      	cmp	r3, #8
 800565a:	d10e      	bne.n	800567a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800565c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f82d 	bl	80056ca <UART_WaitOnFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e023      	b.n	80056c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b04      	cmp	r3, #4
 8005686:	d10e      	bne.n	80056a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f817 	bl	80056ca <UART_WaitOnFlagUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e00d      	b.n	80056c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b09c      	sub	sp, #112	; 0x70
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	603b      	str	r3, [r7, #0]
 80056d6:	4613      	mov	r3, r2
 80056d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056da:	e0a5      	b.n	8005828 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056e2:	f000 80a1 	beq.w	8005828 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e6:	f7fb fe67 	bl	80013b8 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <UART_WaitOnFlagUntilTimeout+0x32>
 80056f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d13e      	bne.n	800577a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800570a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005710:	667b      	str	r3, [r7, #100]	; 0x64
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800571a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800571c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005720:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e6      	bne.n	80056fc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3308      	adds	r3, #8
 8005734:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	f023 0301 	bic.w	r3, r3, #1
 8005744:	663b      	str	r3, [r7, #96]	; 0x60
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3308      	adds	r3, #8
 800574c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800574e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005750:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800575c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e5      	bne.n	800572e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2220      	movs	r2, #32
 8005766:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2220      	movs	r2, #32
 800576c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e067      	b.n	800584a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d04f      	beq.n	8005828 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005796:	d147      	bne.n	8005828 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057a0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
 80057c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e6      	bne.n	80057a2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3308      	adds	r3, #8
 80057da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	613b      	str	r3, [r7, #16]
   return(result);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f023 0301 	bic.w	r3, r3, #1
 80057ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3308      	adds	r3, #8
 80057f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057f4:	623a      	str	r2, [r7, #32]
 80057f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f8:	69f9      	ldr	r1, [r7, #28]
 80057fa:	6a3a      	ldr	r2, [r7, #32]
 80057fc:	e841 2300 	strex	r3, r2, [r1]
 8005800:	61bb      	str	r3, [r7, #24]
   return(result);
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e5      	bne.n	80057d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e010      	b.n	800584a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4013      	ands	r3, r2
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	429a      	cmp	r2, r3
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	429a      	cmp	r2, r3
 8005844:	f43f af4a 	beq.w	80056dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3770      	adds	r7, #112	; 0x70
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <__errno>:
 8005854:	4b01      	ldr	r3, [pc, #4]	; (800585c <__errno+0x8>)
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	2000000c 	.word	0x2000000c

08005860 <__libc_init_array>:
 8005860:	b570      	push	{r4, r5, r6, lr}
 8005862:	4d0d      	ldr	r5, [pc, #52]	; (8005898 <__libc_init_array+0x38>)
 8005864:	4c0d      	ldr	r4, [pc, #52]	; (800589c <__libc_init_array+0x3c>)
 8005866:	1b64      	subs	r4, r4, r5
 8005868:	10a4      	asrs	r4, r4, #2
 800586a:	2600      	movs	r6, #0
 800586c:	42a6      	cmp	r6, r4
 800586e:	d109      	bne.n	8005884 <__libc_init_array+0x24>
 8005870:	4d0b      	ldr	r5, [pc, #44]	; (80058a0 <__libc_init_array+0x40>)
 8005872:	4c0c      	ldr	r4, [pc, #48]	; (80058a4 <__libc_init_array+0x44>)
 8005874:	f000 ff76 	bl	8006764 <_init>
 8005878:	1b64      	subs	r4, r4, r5
 800587a:	10a4      	asrs	r4, r4, #2
 800587c:	2600      	movs	r6, #0
 800587e:	42a6      	cmp	r6, r4
 8005880:	d105      	bne.n	800588e <__libc_init_array+0x2e>
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	f855 3b04 	ldr.w	r3, [r5], #4
 8005888:	4798      	blx	r3
 800588a:	3601      	adds	r6, #1
 800588c:	e7ee      	b.n	800586c <__libc_init_array+0xc>
 800588e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005892:	4798      	blx	r3
 8005894:	3601      	adds	r6, #1
 8005896:	e7f2      	b.n	800587e <__libc_init_array+0x1e>
 8005898:	08006874 	.word	0x08006874
 800589c:	08006874 	.word	0x08006874
 80058a0:	08006874 	.word	0x08006874
 80058a4:	08006878 	.word	0x08006878

080058a8 <memset>:
 80058a8:	4402      	add	r2, r0
 80058aa:	4603      	mov	r3, r0
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d100      	bne.n	80058b2 <memset+0xa>
 80058b0:	4770      	bx	lr
 80058b2:	f803 1b01 	strb.w	r1, [r3], #1
 80058b6:	e7f9      	b.n	80058ac <memset+0x4>

080058b8 <iprintf>:
 80058b8:	b40f      	push	{r0, r1, r2, r3}
 80058ba:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <iprintf+0x2c>)
 80058bc:	b513      	push	{r0, r1, r4, lr}
 80058be:	681c      	ldr	r4, [r3, #0]
 80058c0:	b124      	cbz	r4, 80058cc <iprintf+0x14>
 80058c2:	69a3      	ldr	r3, [r4, #24]
 80058c4:	b913      	cbnz	r3, 80058cc <iprintf+0x14>
 80058c6:	4620      	mov	r0, r4
 80058c8:	f000 f866 	bl	8005998 <__sinit>
 80058cc:	ab05      	add	r3, sp, #20
 80058ce:	9a04      	ldr	r2, [sp, #16]
 80058d0:	68a1      	ldr	r1, [r4, #8]
 80058d2:	9301      	str	r3, [sp, #4]
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 f983 	bl	8005be0 <_vfiprintf_r>
 80058da:	b002      	add	sp, #8
 80058dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e0:	b004      	add	sp, #16
 80058e2:	4770      	bx	lr
 80058e4:	2000000c 	.word	0x2000000c

080058e8 <std>:
 80058e8:	2300      	movs	r3, #0
 80058ea:	b510      	push	{r4, lr}
 80058ec:	4604      	mov	r4, r0
 80058ee:	e9c0 3300 	strd	r3, r3, [r0]
 80058f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058f6:	6083      	str	r3, [r0, #8]
 80058f8:	8181      	strh	r1, [r0, #12]
 80058fa:	6643      	str	r3, [r0, #100]	; 0x64
 80058fc:	81c2      	strh	r2, [r0, #14]
 80058fe:	6183      	str	r3, [r0, #24]
 8005900:	4619      	mov	r1, r3
 8005902:	2208      	movs	r2, #8
 8005904:	305c      	adds	r0, #92	; 0x5c
 8005906:	f7ff ffcf 	bl	80058a8 <memset>
 800590a:	4b05      	ldr	r3, [pc, #20]	; (8005920 <std+0x38>)
 800590c:	6263      	str	r3, [r4, #36]	; 0x24
 800590e:	4b05      	ldr	r3, [pc, #20]	; (8005924 <std+0x3c>)
 8005910:	62a3      	str	r3, [r4, #40]	; 0x28
 8005912:	4b05      	ldr	r3, [pc, #20]	; (8005928 <std+0x40>)
 8005914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <std+0x44>)
 8005918:	6224      	str	r4, [r4, #32]
 800591a:	6323      	str	r3, [r4, #48]	; 0x30
 800591c:	bd10      	pop	{r4, pc}
 800591e:	bf00      	nop
 8005920:	08006189 	.word	0x08006189
 8005924:	080061ab 	.word	0x080061ab
 8005928:	080061e3 	.word	0x080061e3
 800592c:	08006207 	.word	0x08006207

08005930 <_cleanup_r>:
 8005930:	4901      	ldr	r1, [pc, #4]	; (8005938 <_cleanup_r+0x8>)
 8005932:	f000 b8af 	b.w	8005a94 <_fwalk_reent>
 8005936:	bf00      	nop
 8005938:	080064e1 	.word	0x080064e1

0800593c <__sfmoreglue>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	1e4a      	subs	r2, r1, #1
 8005940:	2568      	movs	r5, #104	; 0x68
 8005942:	4355      	muls	r5, r2
 8005944:	460e      	mov	r6, r1
 8005946:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800594a:	f000 f8c5 	bl	8005ad8 <_malloc_r>
 800594e:	4604      	mov	r4, r0
 8005950:	b140      	cbz	r0, 8005964 <__sfmoreglue+0x28>
 8005952:	2100      	movs	r1, #0
 8005954:	e9c0 1600 	strd	r1, r6, [r0]
 8005958:	300c      	adds	r0, #12
 800595a:	60a0      	str	r0, [r4, #8]
 800595c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005960:	f7ff ffa2 	bl	80058a8 <memset>
 8005964:	4620      	mov	r0, r4
 8005966:	bd70      	pop	{r4, r5, r6, pc}

08005968 <__sfp_lock_acquire>:
 8005968:	4801      	ldr	r0, [pc, #4]	; (8005970 <__sfp_lock_acquire+0x8>)
 800596a:	f000 b8b3 	b.w	8005ad4 <__retarget_lock_acquire_recursive>
 800596e:	bf00      	nop
 8005970:	200001c0 	.word	0x200001c0

08005974 <__sfp_lock_release>:
 8005974:	4801      	ldr	r0, [pc, #4]	; (800597c <__sfp_lock_release+0x8>)
 8005976:	f000 b8ae 	b.w	8005ad6 <__retarget_lock_release_recursive>
 800597a:	bf00      	nop
 800597c:	200001c0 	.word	0x200001c0

08005980 <__sinit_lock_acquire>:
 8005980:	4801      	ldr	r0, [pc, #4]	; (8005988 <__sinit_lock_acquire+0x8>)
 8005982:	f000 b8a7 	b.w	8005ad4 <__retarget_lock_acquire_recursive>
 8005986:	bf00      	nop
 8005988:	200001bb 	.word	0x200001bb

0800598c <__sinit_lock_release>:
 800598c:	4801      	ldr	r0, [pc, #4]	; (8005994 <__sinit_lock_release+0x8>)
 800598e:	f000 b8a2 	b.w	8005ad6 <__retarget_lock_release_recursive>
 8005992:	bf00      	nop
 8005994:	200001bb 	.word	0x200001bb

08005998 <__sinit>:
 8005998:	b510      	push	{r4, lr}
 800599a:	4604      	mov	r4, r0
 800599c:	f7ff fff0 	bl	8005980 <__sinit_lock_acquire>
 80059a0:	69a3      	ldr	r3, [r4, #24]
 80059a2:	b11b      	cbz	r3, 80059ac <__sinit+0x14>
 80059a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a8:	f7ff bff0 	b.w	800598c <__sinit_lock_release>
 80059ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80059b0:	6523      	str	r3, [r4, #80]	; 0x50
 80059b2:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <__sinit+0x68>)
 80059b4:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <__sinit+0x6c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	bf04      	itt	eq
 80059be:	2301      	moveq	r3, #1
 80059c0:	61a3      	streq	r3, [r4, #24]
 80059c2:	4620      	mov	r0, r4
 80059c4:	f000 f820 	bl	8005a08 <__sfp>
 80059c8:	6060      	str	r0, [r4, #4]
 80059ca:	4620      	mov	r0, r4
 80059cc:	f000 f81c 	bl	8005a08 <__sfp>
 80059d0:	60a0      	str	r0, [r4, #8]
 80059d2:	4620      	mov	r0, r4
 80059d4:	f000 f818 	bl	8005a08 <__sfp>
 80059d8:	2200      	movs	r2, #0
 80059da:	60e0      	str	r0, [r4, #12]
 80059dc:	2104      	movs	r1, #4
 80059de:	6860      	ldr	r0, [r4, #4]
 80059e0:	f7ff ff82 	bl	80058e8 <std>
 80059e4:	68a0      	ldr	r0, [r4, #8]
 80059e6:	2201      	movs	r2, #1
 80059e8:	2109      	movs	r1, #9
 80059ea:	f7ff ff7d 	bl	80058e8 <std>
 80059ee:	68e0      	ldr	r0, [r4, #12]
 80059f0:	2202      	movs	r2, #2
 80059f2:	2112      	movs	r1, #18
 80059f4:	f7ff ff78 	bl	80058e8 <std>
 80059f8:	2301      	movs	r3, #1
 80059fa:	61a3      	str	r3, [r4, #24]
 80059fc:	e7d2      	b.n	80059a4 <__sinit+0xc>
 80059fe:	bf00      	nop
 8005a00:	080067d4 	.word	0x080067d4
 8005a04:	08005931 	.word	0x08005931

08005a08 <__sfp>:
 8005a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0a:	4607      	mov	r7, r0
 8005a0c:	f7ff ffac 	bl	8005968 <__sfp_lock_acquire>
 8005a10:	4b1e      	ldr	r3, [pc, #120]	; (8005a8c <__sfp+0x84>)
 8005a12:	681e      	ldr	r6, [r3, #0]
 8005a14:	69b3      	ldr	r3, [r6, #24]
 8005a16:	b913      	cbnz	r3, 8005a1e <__sfp+0x16>
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f7ff ffbd 	bl	8005998 <__sinit>
 8005a1e:	3648      	adds	r6, #72	; 0x48
 8005a20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	d503      	bpl.n	8005a30 <__sfp+0x28>
 8005a28:	6833      	ldr	r3, [r6, #0]
 8005a2a:	b30b      	cbz	r3, 8005a70 <__sfp+0x68>
 8005a2c:	6836      	ldr	r6, [r6, #0]
 8005a2e:	e7f7      	b.n	8005a20 <__sfp+0x18>
 8005a30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a34:	b9d5      	cbnz	r5, 8005a6c <__sfp+0x64>
 8005a36:	4b16      	ldr	r3, [pc, #88]	; (8005a90 <__sfp+0x88>)
 8005a38:	60e3      	str	r3, [r4, #12]
 8005a3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a3e:	6665      	str	r5, [r4, #100]	; 0x64
 8005a40:	f000 f847 	bl	8005ad2 <__retarget_lock_init_recursive>
 8005a44:	f7ff ff96 	bl	8005974 <__sfp_lock_release>
 8005a48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a50:	6025      	str	r5, [r4, #0]
 8005a52:	61a5      	str	r5, [r4, #24]
 8005a54:	2208      	movs	r2, #8
 8005a56:	4629      	mov	r1, r5
 8005a58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a5c:	f7ff ff24 	bl	80058a8 <memset>
 8005a60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a68:	4620      	mov	r0, r4
 8005a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a6c:	3468      	adds	r4, #104	; 0x68
 8005a6e:	e7d9      	b.n	8005a24 <__sfp+0x1c>
 8005a70:	2104      	movs	r1, #4
 8005a72:	4638      	mov	r0, r7
 8005a74:	f7ff ff62 	bl	800593c <__sfmoreglue>
 8005a78:	4604      	mov	r4, r0
 8005a7a:	6030      	str	r0, [r6, #0]
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d1d5      	bne.n	8005a2c <__sfp+0x24>
 8005a80:	f7ff ff78 	bl	8005974 <__sfp_lock_release>
 8005a84:	230c      	movs	r3, #12
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	e7ee      	b.n	8005a68 <__sfp+0x60>
 8005a8a:	bf00      	nop
 8005a8c:	080067d4 	.word	0x080067d4
 8005a90:	ffff0001 	.word	0xffff0001

08005a94 <_fwalk_reent>:
 8005a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a98:	4606      	mov	r6, r0
 8005a9a:	4688      	mov	r8, r1
 8005a9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005aa0:	2700      	movs	r7, #0
 8005aa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aa6:	f1b9 0901 	subs.w	r9, r9, #1
 8005aaa:	d505      	bpl.n	8005ab8 <_fwalk_reent+0x24>
 8005aac:	6824      	ldr	r4, [r4, #0]
 8005aae:	2c00      	cmp	r4, #0
 8005ab0:	d1f7      	bne.n	8005aa2 <_fwalk_reent+0xe>
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ab8:	89ab      	ldrh	r3, [r5, #12]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d907      	bls.n	8005ace <_fwalk_reent+0x3a>
 8005abe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	d003      	beq.n	8005ace <_fwalk_reent+0x3a>
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	4630      	mov	r0, r6
 8005aca:	47c0      	blx	r8
 8005acc:	4307      	orrs	r7, r0
 8005ace:	3568      	adds	r5, #104	; 0x68
 8005ad0:	e7e9      	b.n	8005aa6 <_fwalk_reent+0x12>

08005ad2 <__retarget_lock_init_recursive>:
 8005ad2:	4770      	bx	lr

08005ad4 <__retarget_lock_acquire_recursive>:
 8005ad4:	4770      	bx	lr

08005ad6 <__retarget_lock_release_recursive>:
 8005ad6:	4770      	bx	lr

08005ad8 <_malloc_r>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	1ccd      	adds	r5, r1, #3
 8005adc:	f025 0503 	bic.w	r5, r5, #3
 8005ae0:	3508      	adds	r5, #8
 8005ae2:	2d0c      	cmp	r5, #12
 8005ae4:	bf38      	it	cc
 8005ae6:	250c      	movcc	r5, #12
 8005ae8:	2d00      	cmp	r5, #0
 8005aea:	4606      	mov	r6, r0
 8005aec:	db01      	blt.n	8005af2 <_malloc_r+0x1a>
 8005aee:	42a9      	cmp	r1, r5
 8005af0:	d903      	bls.n	8005afa <_malloc_r+0x22>
 8005af2:	230c      	movs	r3, #12
 8005af4:	6033      	str	r3, [r6, #0]
 8005af6:	2000      	movs	r0, #0
 8005af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005afa:	f000 fda3 	bl	8006644 <__malloc_lock>
 8005afe:	4921      	ldr	r1, [pc, #132]	; (8005b84 <_malloc_r+0xac>)
 8005b00:	680a      	ldr	r2, [r1, #0]
 8005b02:	4614      	mov	r4, r2
 8005b04:	b99c      	cbnz	r4, 8005b2e <_malloc_r+0x56>
 8005b06:	4f20      	ldr	r7, [pc, #128]	; (8005b88 <_malloc_r+0xb0>)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	b923      	cbnz	r3, 8005b16 <_malloc_r+0x3e>
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f000 fb2a 	bl	8006168 <_sbrk_r>
 8005b14:	6038      	str	r0, [r7, #0]
 8005b16:	4629      	mov	r1, r5
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f000 fb25 	bl	8006168 <_sbrk_r>
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	d123      	bne.n	8005b6a <_malloc_r+0x92>
 8005b22:	230c      	movs	r3, #12
 8005b24:	6033      	str	r3, [r6, #0]
 8005b26:	4630      	mov	r0, r6
 8005b28:	f000 fd92 	bl	8006650 <__malloc_unlock>
 8005b2c:	e7e3      	b.n	8005af6 <_malloc_r+0x1e>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	1b5b      	subs	r3, r3, r5
 8005b32:	d417      	bmi.n	8005b64 <_malloc_r+0x8c>
 8005b34:	2b0b      	cmp	r3, #11
 8005b36:	d903      	bls.n	8005b40 <_malloc_r+0x68>
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	441c      	add	r4, r3
 8005b3c:	6025      	str	r5, [r4, #0]
 8005b3e:	e004      	b.n	8005b4a <_malloc_r+0x72>
 8005b40:	6863      	ldr	r3, [r4, #4]
 8005b42:	42a2      	cmp	r2, r4
 8005b44:	bf0c      	ite	eq
 8005b46:	600b      	streq	r3, [r1, #0]
 8005b48:	6053      	strne	r3, [r2, #4]
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f000 fd80 	bl	8006650 <__malloc_unlock>
 8005b50:	f104 000b 	add.w	r0, r4, #11
 8005b54:	1d23      	adds	r3, r4, #4
 8005b56:	f020 0007 	bic.w	r0, r0, #7
 8005b5a:	1ac2      	subs	r2, r0, r3
 8005b5c:	d0cc      	beq.n	8005af8 <_malloc_r+0x20>
 8005b5e:	1a1b      	subs	r3, r3, r0
 8005b60:	50a3      	str	r3, [r4, r2]
 8005b62:	e7c9      	b.n	8005af8 <_malloc_r+0x20>
 8005b64:	4622      	mov	r2, r4
 8005b66:	6864      	ldr	r4, [r4, #4]
 8005b68:	e7cc      	b.n	8005b04 <_malloc_r+0x2c>
 8005b6a:	1cc4      	adds	r4, r0, #3
 8005b6c:	f024 0403 	bic.w	r4, r4, #3
 8005b70:	42a0      	cmp	r0, r4
 8005b72:	d0e3      	beq.n	8005b3c <_malloc_r+0x64>
 8005b74:	1a21      	subs	r1, r4, r0
 8005b76:	4630      	mov	r0, r6
 8005b78:	f000 faf6 	bl	8006168 <_sbrk_r>
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d1dd      	bne.n	8005b3c <_malloc_r+0x64>
 8005b80:	e7cf      	b.n	8005b22 <_malloc_r+0x4a>
 8005b82:	bf00      	nop
 8005b84:	20000090 	.word	0x20000090
 8005b88:	20000094 	.word	0x20000094

08005b8c <__sfputc_r>:
 8005b8c:	6893      	ldr	r3, [r2, #8]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	b410      	push	{r4}
 8005b94:	6093      	str	r3, [r2, #8]
 8005b96:	da08      	bge.n	8005baa <__sfputc_r+0x1e>
 8005b98:	6994      	ldr	r4, [r2, #24]
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	db01      	blt.n	8005ba2 <__sfputc_r+0x16>
 8005b9e:	290a      	cmp	r1, #10
 8005ba0:	d103      	bne.n	8005baa <__sfputc_r+0x1e>
 8005ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ba6:	f000 bb33 	b.w	8006210 <__swbuf_r>
 8005baa:	6813      	ldr	r3, [r2, #0]
 8005bac:	1c58      	adds	r0, r3, #1
 8005bae:	6010      	str	r0, [r2, #0]
 8005bb0:	7019      	strb	r1, [r3, #0]
 8005bb2:	4608      	mov	r0, r1
 8005bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <__sfputs_r>:
 8005bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbc:	4606      	mov	r6, r0
 8005bbe:	460f      	mov	r7, r1
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	18d5      	adds	r5, r2, r3
 8005bc4:	42ac      	cmp	r4, r5
 8005bc6:	d101      	bne.n	8005bcc <__sfputs_r+0x12>
 8005bc8:	2000      	movs	r0, #0
 8005bca:	e007      	b.n	8005bdc <__sfputs_r+0x22>
 8005bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd0:	463a      	mov	r2, r7
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7ff ffda 	bl	8005b8c <__sfputc_r>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d1f3      	bne.n	8005bc4 <__sfputs_r+0xa>
 8005bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005be0 <_vfiprintf_r>:
 8005be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be4:	460d      	mov	r5, r1
 8005be6:	b09d      	sub	sp, #116	; 0x74
 8005be8:	4614      	mov	r4, r2
 8005bea:	4698      	mov	r8, r3
 8005bec:	4606      	mov	r6, r0
 8005bee:	b118      	cbz	r0, 8005bf8 <_vfiprintf_r+0x18>
 8005bf0:	6983      	ldr	r3, [r0, #24]
 8005bf2:	b90b      	cbnz	r3, 8005bf8 <_vfiprintf_r+0x18>
 8005bf4:	f7ff fed0 	bl	8005998 <__sinit>
 8005bf8:	4b89      	ldr	r3, [pc, #548]	; (8005e20 <_vfiprintf_r+0x240>)
 8005bfa:	429d      	cmp	r5, r3
 8005bfc:	d11b      	bne.n	8005c36 <_vfiprintf_r+0x56>
 8005bfe:	6875      	ldr	r5, [r6, #4]
 8005c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c02:	07d9      	lsls	r1, r3, #31
 8005c04:	d405      	bmi.n	8005c12 <_vfiprintf_r+0x32>
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	059a      	lsls	r2, r3, #22
 8005c0a:	d402      	bmi.n	8005c12 <_vfiprintf_r+0x32>
 8005c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c0e:	f7ff ff61 	bl	8005ad4 <__retarget_lock_acquire_recursive>
 8005c12:	89ab      	ldrh	r3, [r5, #12]
 8005c14:	071b      	lsls	r3, r3, #28
 8005c16:	d501      	bpl.n	8005c1c <_vfiprintf_r+0x3c>
 8005c18:	692b      	ldr	r3, [r5, #16]
 8005c1a:	b9eb      	cbnz	r3, 8005c58 <_vfiprintf_r+0x78>
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f000 fb5a 	bl	80062d8 <__swsetup_r>
 8005c24:	b1c0      	cbz	r0, 8005c58 <_vfiprintf_r+0x78>
 8005c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c28:	07dc      	lsls	r4, r3, #31
 8005c2a:	d50e      	bpl.n	8005c4a <_vfiprintf_r+0x6a>
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c30:	b01d      	add	sp, #116	; 0x74
 8005c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c36:	4b7b      	ldr	r3, [pc, #492]	; (8005e24 <_vfiprintf_r+0x244>)
 8005c38:	429d      	cmp	r5, r3
 8005c3a:	d101      	bne.n	8005c40 <_vfiprintf_r+0x60>
 8005c3c:	68b5      	ldr	r5, [r6, #8]
 8005c3e:	e7df      	b.n	8005c00 <_vfiprintf_r+0x20>
 8005c40:	4b79      	ldr	r3, [pc, #484]	; (8005e28 <_vfiprintf_r+0x248>)
 8005c42:	429d      	cmp	r5, r3
 8005c44:	bf08      	it	eq
 8005c46:	68f5      	ldreq	r5, [r6, #12]
 8005c48:	e7da      	b.n	8005c00 <_vfiprintf_r+0x20>
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	0598      	lsls	r0, r3, #22
 8005c4e:	d4ed      	bmi.n	8005c2c <_vfiprintf_r+0x4c>
 8005c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c52:	f7ff ff40 	bl	8005ad6 <__retarget_lock_release_recursive>
 8005c56:	e7e9      	b.n	8005c2c <_vfiprintf_r+0x4c>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c5c:	2320      	movs	r3, #32
 8005c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c66:	2330      	movs	r3, #48	; 0x30
 8005c68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e2c <_vfiprintf_r+0x24c>
 8005c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c70:	f04f 0901 	mov.w	r9, #1
 8005c74:	4623      	mov	r3, r4
 8005c76:	469a      	mov	sl, r3
 8005c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c7c:	b10a      	cbz	r2, 8005c82 <_vfiprintf_r+0xa2>
 8005c7e:	2a25      	cmp	r2, #37	; 0x25
 8005c80:	d1f9      	bne.n	8005c76 <_vfiprintf_r+0x96>
 8005c82:	ebba 0b04 	subs.w	fp, sl, r4
 8005c86:	d00b      	beq.n	8005ca0 <_vfiprintf_r+0xc0>
 8005c88:	465b      	mov	r3, fp
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f7ff ff93 	bl	8005bba <__sfputs_r>
 8005c94:	3001      	adds	r0, #1
 8005c96:	f000 80aa 	beq.w	8005dee <_vfiprintf_r+0x20e>
 8005c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c9c:	445a      	add	r2, fp
 8005c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8005ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 80a2 	beq.w	8005dee <_vfiprintf_r+0x20e>
 8005caa:	2300      	movs	r3, #0
 8005cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cb4:	f10a 0a01 	add.w	sl, sl, #1
 8005cb8:	9304      	str	r3, [sp, #16]
 8005cba:	9307      	str	r3, [sp, #28]
 8005cbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cc0:	931a      	str	r3, [sp, #104]	; 0x68
 8005cc2:	4654      	mov	r4, sl
 8005cc4:	2205      	movs	r2, #5
 8005cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cca:	4858      	ldr	r0, [pc, #352]	; (8005e2c <_vfiprintf_r+0x24c>)
 8005ccc:	f7fa fa80 	bl	80001d0 <memchr>
 8005cd0:	9a04      	ldr	r2, [sp, #16]
 8005cd2:	b9d8      	cbnz	r0, 8005d0c <_vfiprintf_r+0x12c>
 8005cd4:	06d1      	lsls	r1, r2, #27
 8005cd6:	bf44      	itt	mi
 8005cd8:	2320      	movmi	r3, #32
 8005cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cde:	0713      	lsls	r3, r2, #28
 8005ce0:	bf44      	itt	mi
 8005ce2:	232b      	movmi	r3, #43	; 0x2b
 8005ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cec:	2b2a      	cmp	r3, #42	; 0x2a
 8005cee:	d015      	beq.n	8005d1c <_vfiprintf_r+0x13c>
 8005cf0:	9a07      	ldr	r2, [sp, #28]
 8005cf2:	4654      	mov	r4, sl
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	f04f 0c0a 	mov.w	ip, #10
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d00:	3b30      	subs	r3, #48	; 0x30
 8005d02:	2b09      	cmp	r3, #9
 8005d04:	d94e      	bls.n	8005da4 <_vfiprintf_r+0x1c4>
 8005d06:	b1b0      	cbz	r0, 8005d36 <_vfiprintf_r+0x156>
 8005d08:	9207      	str	r2, [sp, #28]
 8005d0a:	e014      	b.n	8005d36 <_vfiprintf_r+0x156>
 8005d0c:	eba0 0308 	sub.w	r3, r0, r8
 8005d10:	fa09 f303 	lsl.w	r3, r9, r3
 8005d14:	4313      	orrs	r3, r2
 8005d16:	9304      	str	r3, [sp, #16]
 8005d18:	46a2      	mov	sl, r4
 8005d1a:	e7d2      	b.n	8005cc2 <_vfiprintf_r+0xe2>
 8005d1c:	9b03      	ldr	r3, [sp, #12]
 8005d1e:	1d19      	adds	r1, r3, #4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	9103      	str	r1, [sp, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	bfbb      	ittet	lt
 8005d28:	425b      	neglt	r3, r3
 8005d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d2e:	9307      	strge	r3, [sp, #28]
 8005d30:	9307      	strlt	r3, [sp, #28]
 8005d32:	bfb8      	it	lt
 8005d34:	9204      	strlt	r2, [sp, #16]
 8005d36:	7823      	ldrb	r3, [r4, #0]
 8005d38:	2b2e      	cmp	r3, #46	; 0x2e
 8005d3a:	d10c      	bne.n	8005d56 <_vfiprintf_r+0x176>
 8005d3c:	7863      	ldrb	r3, [r4, #1]
 8005d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d40:	d135      	bne.n	8005dae <_vfiprintf_r+0x1ce>
 8005d42:	9b03      	ldr	r3, [sp, #12]
 8005d44:	1d1a      	adds	r2, r3, #4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	9203      	str	r2, [sp, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	bfb8      	it	lt
 8005d4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d52:	3402      	adds	r4, #2
 8005d54:	9305      	str	r3, [sp, #20]
 8005d56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e3c <_vfiprintf_r+0x25c>
 8005d5a:	7821      	ldrb	r1, [r4, #0]
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	4650      	mov	r0, sl
 8005d60:	f7fa fa36 	bl	80001d0 <memchr>
 8005d64:	b140      	cbz	r0, 8005d78 <_vfiprintf_r+0x198>
 8005d66:	2340      	movs	r3, #64	; 0x40
 8005d68:	eba0 000a 	sub.w	r0, r0, sl
 8005d6c:	fa03 f000 	lsl.w	r0, r3, r0
 8005d70:	9b04      	ldr	r3, [sp, #16]
 8005d72:	4303      	orrs	r3, r0
 8005d74:	3401      	adds	r4, #1
 8005d76:	9304      	str	r3, [sp, #16]
 8005d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d7c:	482c      	ldr	r0, [pc, #176]	; (8005e30 <_vfiprintf_r+0x250>)
 8005d7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d82:	2206      	movs	r2, #6
 8005d84:	f7fa fa24 	bl	80001d0 <memchr>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d03f      	beq.n	8005e0c <_vfiprintf_r+0x22c>
 8005d8c:	4b29      	ldr	r3, [pc, #164]	; (8005e34 <_vfiprintf_r+0x254>)
 8005d8e:	bb1b      	cbnz	r3, 8005dd8 <_vfiprintf_r+0x1f8>
 8005d90:	9b03      	ldr	r3, [sp, #12]
 8005d92:	3307      	adds	r3, #7
 8005d94:	f023 0307 	bic.w	r3, r3, #7
 8005d98:	3308      	adds	r3, #8
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9e:	443b      	add	r3, r7
 8005da0:	9309      	str	r3, [sp, #36]	; 0x24
 8005da2:	e767      	b.n	8005c74 <_vfiprintf_r+0x94>
 8005da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005da8:	460c      	mov	r4, r1
 8005daa:	2001      	movs	r0, #1
 8005dac:	e7a5      	b.n	8005cfa <_vfiprintf_r+0x11a>
 8005dae:	2300      	movs	r3, #0
 8005db0:	3401      	adds	r4, #1
 8005db2:	9305      	str	r3, [sp, #20]
 8005db4:	4619      	mov	r1, r3
 8005db6:	f04f 0c0a 	mov.w	ip, #10
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dc0:	3a30      	subs	r2, #48	; 0x30
 8005dc2:	2a09      	cmp	r2, #9
 8005dc4:	d903      	bls.n	8005dce <_vfiprintf_r+0x1ee>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0c5      	beq.n	8005d56 <_vfiprintf_r+0x176>
 8005dca:	9105      	str	r1, [sp, #20]
 8005dcc:	e7c3      	b.n	8005d56 <_vfiprintf_r+0x176>
 8005dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e7f0      	b.n	8005dba <_vfiprintf_r+0x1da>
 8005dd8:	ab03      	add	r3, sp, #12
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	462a      	mov	r2, r5
 8005dde:	4b16      	ldr	r3, [pc, #88]	; (8005e38 <_vfiprintf_r+0x258>)
 8005de0:	a904      	add	r1, sp, #16
 8005de2:	4630      	mov	r0, r6
 8005de4:	f3af 8000 	nop.w
 8005de8:	4607      	mov	r7, r0
 8005dea:	1c78      	adds	r0, r7, #1
 8005dec:	d1d6      	bne.n	8005d9c <_vfiprintf_r+0x1bc>
 8005dee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005df0:	07d9      	lsls	r1, r3, #31
 8005df2:	d405      	bmi.n	8005e00 <_vfiprintf_r+0x220>
 8005df4:	89ab      	ldrh	r3, [r5, #12]
 8005df6:	059a      	lsls	r2, r3, #22
 8005df8:	d402      	bmi.n	8005e00 <_vfiprintf_r+0x220>
 8005dfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dfc:	f7ff fe6b 	bl	8005ad6 <__retarget_lock_release_recursive>
 8005e00:	89ab      	ldrh	r3, [r5, #12]
 8005e02:	065b      	lsls	r3, r3, #25
 8005e04:	f53f af12 	bmi.w	8005c2c <_vfiprintf_r+0x4c>
 8005e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e0a:	e711      	b.n	8005c30 <_vfiprintf_r+0x50>
 8005e0c:	ab03      	add	r3, sp, #12
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	462a      	mov	r2, r5
 8005e12:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <_vfiprintf_r+0x258>)
 8005e14:	a904      	add	r1, sp, #16
 8005e16:	4630      	mov	r0, r6
 8005e18:	f000 f880 	bl	8005f1c <_printf_i>
 8005e1c:	e7e4      	b.n	8005de8 <_vfiprintf_r+0x208>
 8005e1e:	bf00      	nop
 8005e20:	080067f8 	.word	0x080067f8
 8005e24:	08006818 	.word	0x08006818
 8005e28:	080067d8 	.word	0x080067d8
 8005e2c:	08006838 	.word	0x08006838
 8005e30:	08006842 	.word	0x08006842
 8005e34:	00000000 	.word	0x00000000
 8005e38:	08005bbb 	.word	0x08005bbb
 8005e3c:	0800683e 	.word	0x0800683e

08005e40 <_printf_common>:
 8005e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e44:	4616      	mov	r6, r2
 8005e46:	4699      	mov	r9, r3
 8005e48:	688a      	ldr	r2, [r1, #8]
 8005e4a:	690b      	ldr	r3, [r1, #16]
 8005e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e50:	4293      	cmp	r3, r2
 8005e52:	bfb8      	it	lt
 8005e54:	4613      	movlt	r3, r2
 8005e56:	6033      	str	r3, [r6, #0]
 8005e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	b10a      	cbz	r2, 8005e66 <_printf_common+0x26>
 8005e62:	3301      	adds	r3, #1
 8005e64:	6033      	str	r3, [r6, #0]
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	0699      	lsls	r1, r3, #26
 8005e6a:	bf42      	ittt	mi
 8005e6c:	6833      	ldrmi	r3, [r6, #0]
 8005e6e:	3302      	addmi	r3, #2
 8005e70:	6033      	strmi	r3, [r6, #0]
 8005e72:	6825      	ldr	r5, [r4, #0]
 8005e74:	f015 0506 	ands.w	r5, r5, #6
 8005e78:	d106      	bne.n	8005e88 <_printf_common+0x48>
 8005e7a:	f104 0a19 	add.w	sl, r4, #25
 8005e7e:	68e3      	ldr	r3, [r4, #12]
 8005e80:	6832      	ldr	r2, [r6, #0]
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	42ab      	cmp	r3, r5
 8005e86:	dc26      	bgt.n	8005ed6 <_printf_common+0x96>
 8005e88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e8c:	1e13      	subs	r3, r2, #0
 8005e8e:	6822      	ldr	r2, [r4, #0]
 8005e90:	bf18      	it	ne
 8005e92:	2301      	movne	r3, #1
 8005e94:	0692      	lsls	r2, r2, #26
 8005e96:	d42b      	bmi.n	8005ef0 <_printf_common+0xb0>
 8005e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	4638      	mov	r0, r7
 8005ea0:	47c0      	blx	r8
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d01e      	beq.n	8005ee4 <_printf_common+0xa4>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	68e5      	ldr	r5, [r4, #12]
 8005eaa:	6832      	ldr	r2, [r6, #0]
 8005eac:	f003 0306 	and.w	r3, r3, #6
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	bf08      	it	eq
 8005eb4:	1aad      	subeq	r5, r5, r2
 8005eb6:	68a3      	ldr	r3, [r4, #8]
 8005eb8:	6922      	ldr	r2, [r4, #16]
 8005eba:	bf0c      	ite	eq
 8005ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ec0:	2500      	movne	r5, #0
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	bfc4      	itt	gt
 8005ec6:	1a9b      	subgt	r3, r3, r2
 8005ec8:	18ed      	addgt	r5, r5, r3
 8005eca:	2600      	movs	r6, #0
 8005ecc:	341a      	adds	r4, #26
 8005ece:	42b5      	cmp	r5, r6
 8005ed0:	d11a      	bne.n	8005f08 <_printf_common+0xc8>
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	e008      	b.n	8005ee8 <_printf_common+0xa8>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	4652      	mov	r2, sl
 8005eda:	4649      	mov	r1, r9
 8005edc:	4638      	mov	r0, r7
 8005ede:	47c0      	blx	r8
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d103      	bne.n	8005eec <_printf_common+0xac>
 8005ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eec:	3501      	adds	r5, #1
 8005eee:	e7c6      	b.n	8005e7e <_printf_common+0x3e>
 8005ef0:	18e1      	adds	r1, r4, r3
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	2030      	movs	r0, #48	; 0x30
 8005ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005efa:	4422      	add	r2, r4
 8005efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f04:	3302      	adds	r3, #2
 8005f06:	e7c7      	b.n	8005e98 <_printf_common+0x58>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	4649      	mov	r1, r9
 8005f0e:	4638      	mov	r0, r7
 8005f10:	47c0      	blx	r8
 8005f12:	3001      	adds	r0, #1
 8005f14:	d0e6      	beq.n	8005ee4 <_printf_common+0xa4>
 8005f16:	3601      	adds	r6, #1
 8005f18:	e7d9      	b.n	8005ece <_printf_common+0x8e>
	...

08005f1c <_printf_i>:
 8005f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f20:	460c      	mov	r4, r1
 8005f22:	4691      	mov	r9, r2
 8005f24:	7e27      	ldrb	r7, [r4, #24]
 8005f26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f28:	2f78      	cmp	r7, #120	; 0x78
 8005f2a:	4680      	mov	r8, r0
 8005f2c:	469a      	mov	sl, r3
 8005f2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f32:	d807      	bhi.n	8005f44 <_printf_i+0x28>
 8005f34:	2f62      	cmp	r7, #98	; 0x62
 8005f36:	d80a      	bhi.n	8005f4e <_printf_i+0x32>
 8005f38:	2f00      	cmp	r7, #0
 8005f3a:	f000 80d8 	beq.w	80060ee <_printf_i+0x1d2>
 8005f3e:	2f58      	cmp	r7, #88	; 0x58
 8005f40:	f000 80a3 	beq.w	800608a <_printf_i+0x16e>
 8005f44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f4c:	e03a      	b.n	8005fc4 <_printf_i+0xa8>
 8005f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f52:	2b15      	cmp	r3, #21
 8005f54:	d8f6      	bhi.n	8005f44 <_printf_i+0x28>
 8005f56:	a001      	add	r0, pc, #4	; (adr r0, 8005f5c <_printf_i+0x40>)
 8005f58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f5c:	08005fb5 	.word	0x08005fb5
 8005f60:	08005fc9 	.word	0x08005fc9
 8005f64:	08005f45 	.word	0x08005f45
 8005f68:	08005f45 	.word	0x08005f45
 8005f6c:	08005f45 	.word	0x08005f45
 8005f70:	08005f45 	.word	0x08005f45
 8005f74:	08005fc9 	.word	0x08005fc9
 8005f78:	08005f45 	.word	0x08005f45
 8005f7c:	08005f45 	.word	0x08005f45
 8005f80:	08005f45 	.word	0x08005f45
 8005f84:	08005f45 	.word	0x08005f45
 8005f88:	080060d5 	.word	0x080060d5
 8005f8c:	08005ff9 	.word	0x08005ff9
 8005f90:	080060b7 	.word	0x080060b7
 8005f94:	08005f45 	.word	0x08005f45
 8005f98:	08005f45 	.word	0x08005f45
 8005f9c:	080060f7 	.word	0x080060f7
 8005fa0:	08005f45 	.word	0x08005f45
 8005fa4:	08005ff9 	.word	0x08005ff9
 8005fa8:	08005f45 	.word	0x08005f45
 8005fac:	08005f45 	.word	0x08005f45
 8005fb0:	080060bf 	.word	0x080060bf
 8005fb4:	680b      	ldr	r3, [r1, #0]
 8005fb6:	1d1a      	adds	r2, r3, #4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	600a      	str	r2, [r1, #0]
 8005fbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e0a3      	b.n	8006110 <_printf_i+0x1f4>
 8005fc8:	6825      	ldr	r5, [r4, #0]
 8005fca:	6808      	ldr	r0, [r1, #0]
 8005fcc:	062e      	lsls	r6, r5, #24
 8005fce:	f100 0304 	add.w	r3, r0, #4
 8005fd2:	d50a      	bpl.n	8005fea <_printf_i+0xce>
 8005fd4:	6805      	ldr	r5, [r0, #0]
 8005fd6:	600b      	str	r3, [r1, #0]
 8005fd8:	2d00      	cmp	r5, #0
 8005fda:	da03      	bge.n	8005fe4 <_printf_i+0xc8>
 8005fdc:	232d      	movs	r3, #45	; 0x2d
 8005fde:	426d      	negs	r5, r5
 8005fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe4:	485e      	ldr	r0, [pc, #376]	; (8006160 <_printf_i+0x244>)
 8005fe6:	230a      	movs	r3, #10
 8005fe8:	e019      	b.n	800601e <_printf_i+0x102>
 8005fea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005fee:	6805      	ldr	r5, [r0, #0]
 8005ff0:	600b      	str	r3, [r1, #0]
 8005ff2:	bf18      	it	ne
 8005ff4:	b22d      	sxthne	r5, r5
 8005ff6:	e7ef      	b.n	8005fd8 <_printf_i+0xbc>
 8005ff8:	680b      	ldr	r3, [r1, #0]
 8005ffa:	6825      	ldr	r5, [r4, #0]
 8005ffc:	1d18      	adds	r0, r3, #4
 8005ffe:	6008      	str	r0, [r1, #0]
 8006000:	0628      	lsls	r0, r5, #24
 8006002:	d501      	bpl.n	8006008 <_printf_i+0xec>
 8006004:	681d      	ldr	r5, [r3, #0]
 8006006:	e002      	b.n	800600e <_printf_i+0xf2>
 8006008:	0669      	lsls	r1, r5, #25
 800600a:	d5fb      	bpl.n	8006004 <_printf_i+0xe8>
 800600c:	881d      	ldrh	r5, [r3, #0]
 800600e:	4854      	ldr	r0, [pc, #336]	; (8006160 <_printf_i+0x244>)
 8006010:	2f6f      	cmp	r7, #111	; 0x6f
 8006012:	bf0c      	ite	eq
 8006014:	2308      	moveq	r3, #8
 8006016:	230a      	movne	r3, #10
 8006018:	2100      	movs	r1, #0
 800601a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800601e:	6866      	ldr	r6, [r4, #4]
 8006020:	60a6      	str	r6, [r4, #8]
 8006022:	2e00      	cmp	r6, #0
 8006024:	bfa2      	ittt	ge
 8006026:	6821      	ldrge	r1, [r4, #0]
 8006028:	f021 0104 	bicge.w	r1, r1, #4
 800602c:	6021      	strge	r1, [r4, #0]
 800602e:	b90d      	cbnz	r5, 8006034 <_printf_i+0x118>
 8006030:	2e00      	cmp	r6, #0
 8006032:	d04d      	beq.n	80060d0 <_printf_i+0x1b4>
 8006034:	4616      	mov	r6, r2
 8006036:	fbb5 f1f3 	udiv	r1, r5, r3
 800603a:	fb03 5711 	mls	r7, r3, r1, r5
 800603e:	5dc7      	ldrb	r7, [r0, r7]
 8006040:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006044:	462f      	mov	r7, r5
 8006046:	42bb      	cmp	r3, r7
 8006048:	460d      	mov	r5, r1
 800604a:	d9f4      	bls.n	8006036 <_printf_i+0x11a>
 800604c:	2b08      	cmp	r3, #8
 800604e:	d10b      	bne.n	8006068 <_printf_i+0x14c>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	07df      	lsls	r7, r3, #31
 8006054:	d508      	bpl.n	8006068 <_printf_i+0x14c>
 8006056:	6923      	ldr	r3, [r4, #16]
 8006058:	6861      	ldr	r1, [r4, #4]
 800605a:	4299      	cmp	r1, r3
 800605c:	bfde      	ittt	le
 800605e:	2330      	movle	r3, #48	; 0x30
 8006060:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006064:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006068:	1b92      	subs	r2, r2, r6
 800606a:	6122      	str	r2, [r4, #16]
 800606c:	f8cd a000 	str.w	sl, [sp]
 8006070:	464b      	mov	r3, r9
 8006072:	aa03      	add	r2, sp, #12
 8006074:	4621      	mov	r1, r4
 8006076:	4640      	mov	r0, r8
 8006078:	f7ff fee2 	bl	8005e40 <_printf_common>
 800607c:	3001      	adds	r0, #1
 800607e:	d14c      	bne.n	800611a <_printf_i+0x1fe>
 8006080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006084:	b004      	add	sp, #16
 8006086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608a:	4835      	ldr	r0, [pc, #212]	; (8006160 <_printf_i+0x244>)
 800608c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	680e      	ldr	r6, [r1, #0]
 8006094:	061f      	lsls	r7, r3, #24
 8006096:	f856 5b04 	ldr.w	r5, [r6], #4
 800609a:	600e      	str	r6, [r1, #0]
 800609c:	d514      	bpl.n	80060c8 <_printf_i+0x1ac>
 800609e:	07d9      	lsls	r1, r3, #31
 80060a0:	bf44      	itt	mi
 80060a2:	f043 0320 	orrmi.w	r3, r3, #32
 80060a6:	6023      	strmi	r3, [r4, #0]
 80060a8:	b91d      	cbnz	r5, 80060b2 <_printf_i+0x196>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	f023 0320 	bic.w	r3, r3, #32
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	2310      	movs	r3, #16
 80060b4:	e7b0      	b.n	8006018 <_printf_i+0xfc>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	f043 0320 	orr.w	r3, r3, #32
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	2378      	movs	r3, #120	; 0x78
 80060c0:	4828      	ldr	r0, [pc, #160]	; (8006164 <_printf_i+0x248>)
 80060c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060c6:	e7e3      	b.n	8006090 <_printf_i+0x174>
 80060c8:	065e      	lsls	r6, r3, #25
 80060ca:	bf48      	it	mi
 80060cc:	b2ad      	uxthmi	r5, r5
 80060ce:	e7e6      	b.n	800609e <_printf_i+0x182>
 80060d0:	4616      	mov	r6, r2
 80060d2:	e7bb      	b.n	800604c <_printf_i+0x130>
 80060d4:	680b      	ldr	r3, [r1, #0]
 80060d6:	6826      	ldr	r6, [r4, #0]
 80060d8:	6960      	ldr	r0, [r4, #20]
 80060da:	1d1d      	adds	r5, r3, #4
 80060dc:	600d      	str	r5, [r1, #0]
 80060de:	0635      	lsls	r5, r6, #24
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	d501      	bpl.n	80060e8 <_printf_i+0x1cc>
 80060e4:	6018      	str	r0, [r3, #0]
 80060e6:	e002      	b.n	80060ee <_printf_i+0x1d2>
 80060e8:	0671      	lsls	r1, r6, #25
 80060ea:	d5fb      	bpl.n	80060e4 <_printf_i+0x1c8>
 80060ec:	8018      	strh	r0, [r3, #0]
 80060ee:	2300      	movs	r3, #0
 80060f0:	6123      	str	r3, [r4, #16]
 80060f2:	4616      	mov	r6, r2
 80060f4:	e7ba      	b.n	800606c <_printf_i+0x150>
 80060f6:	680b      	ldr	r3, [r1, #0]
 80060f8:	1d1a      	adds	r2, r3, #4
 80060fa:	600a      	str	r2, [r1, #0]
 80060fc:	681e      	ldr	r6, [r3, #0]
 80060fe:	6862      	ldr	r2, [r4, #4]
 8006100:	2100      	movs	r1, #0
 8006102:	4630      	mov	r0, r6
 8006104:	f7fa f864 	bl	80001d0 <memchr>
 8006108:	b108      	cbz	r0, 800610e <_printf_i+0x1f2>
 800610a:	1b80      	subs	r0, r0, r6
 800610c:	6060      	str	r0, [r4, #4]
 800610e:	6863      	ldr	r3, [r4, #4]
 8006110:	6123      	str	r3, [r4, #16]
 8006112:	2300      	movs	r3, #0
 8006114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006118:	e7a8      	b.n	800606c <_printf_i+0x150>
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	4632      	mov	r2, r6
 800611e:	4649      	mov	r1, r9
 8006120:	4640      	mov	r0, r8
 8006122:	47d0      	blx	sl
 8006124:	3001      	adds	r0, #1
 8006126:	d0ab      	beq.n	8006080 <_printf_i+0x164>
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	079b      	lsls	r3, r3, #30
 800612c:	d413      	bmi.n	8006156 <_printf_i+0x23a>
 800612e:	68e0      	ldr	r0, [r4, #12]
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	4298      	cmp	r0, r3
 8006134:	bfb8      	it	lt
 8006136:	4618      	movlt	r0, r3
 8006138:	e7a4      	b.n	8006084 <_printf_i+0x168>
 800613a:	2301      	movs	r3, #1
 800613c:	4632      	mov	r2, r6
 800613e:	4649      	mov	r1, r9
 8006140:	4640      	mov	r0, r8
 8006142:	47d0      	blx	sl
 8006144:	3001      	adds	r0, #1
 8006146:	d09b      	beq.n	8006080 <_printf_i+0x164>
 8006148:	3501      	adds	r5, #1
 800614a:	68e3      	ldr	r3, [r4, #12]
 800614c:	9903      	ldr	r1, [sp, #12]
 800614e:	1a5b      	subs	r3, r3, r1
 8006150:	42ab      	cmp	r3, r5
 8006152:	dcf2      	bgt.n	800613a <_printf_i+0x21e>
 8006154:	e7eb      	b.n	800612e <_printf_i+0x212>
 8006156:	2500      	movs	r5, #0
 8006158:	f104 0619 	add.w	r6, r4, #25
 800615c:	e7f5      	b.n	800614a <_printf_i+0x22e>
 800615e:	bf00      	nop
 8006160:	08006849 	.word	0x08006849
 8006164:	0800685a 	.word	0x0800685a

08006168 <_sbrk_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	4d06      	ldr	r5, [pc, #24]	; (8006184 <_sbrk_r+0x1c>)
 800616c:	2300      	movs	r3, #0
 800616e:	4604      	mov	r4, r0
 8006170:	4608      	mov	r0, r1
 8006172:	602b      	str	r3, [r5, #0]
 8006174:	f7fb f846 	bl	8001204 <_sbrk>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d102      	bne.n	8006182 <_sbrk_r+0x1a>
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	b103      	cbz	r3, 8006182 <_sbrk_r+0x1a>
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	200001c4 	.word	0x200001c4

08006188 <__sread>:
 8006188:	b510      	push	{r4, lr}
 800618a:	460c      	mov	r4, r1
 800618c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006190:	f000 fab4 	bl	80066fc <_read_r>
 8006194:	2800      	cmp	r0, #0
 8006196:	bfab      	itete	ge
 8006198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800619a:	89a3      	ldrhlt	r3, [r4, #12]
 800619c:	181b      	addge	r3, r3, r0
 800619e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061a2:	bfac      	ite	ge
 80061a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80061a6:	81a3      	strhlt	r3, [r4, #12]
 80061a8:	bd10      	pop	{r4, pc}

080061aa <__swrite>:
 80061aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ae:	461f      	mov	r7, r3
 80061b0:	898b      	ldrh	r3, [r1, #12]
 80061b2:	05db      	lsls	r3, r3, #23
 80061b4:	4605      	mov	r5, r0
 80061b6:	460c      	mov	r4, r1
 80061b8:	4616      	mov	r6, r2
 80061ba:	d505      	bpl.n	80061c8 <__swrite+0x1e>
 80061bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c0:	2302      	movs	r3, #2
 80061c2:	2200      	movs	r2, #0
 80061c4:	f000 f9c8 	bl	8006558 <_lseek_r>
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	4632      	mov	r2, r6
 80061d6:	463b      	mov	r3, r7
 80061d8:	4628      	mov	r0, r5
 80061da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061de:	f000 b869 	b.w	80062b4 <_write_r>

080061e2 <__sseek>:
 80061e2:	b510      	push	{r4, lr}
 80061e4:	460c      	mov	r4, r1
 80061e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ea:	f000 f9b5 	bl	8006558 <_lseek_r>
 80061ee:	1c43      	adds	r3, r0, #1
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	bf15      	itete	ne
 80061f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80061f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061fe:	81a3      	strheq	r3, [r4, #12]
 8006200:	bf18      	it	ne
 8006202:	81a3      	strhne	r3, [r4, #12]
 8006204:	bd10      	pop	{r4, pc}

08006206 <__sclose>:
 8006206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620a:	f000 b8d3 	b.w	80063b4 <_close_r>
	...

08006210 <__swbuf_r>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	460e      	mov	r6, r1
 8006214:	4614      	mov	r4, r2
 8006216:	4605      	mov	r5, r0
 8006218:	b118      	cbz	r0, 8006222 <__swbuf_r+0x12>
 800621a:	6983      	ldr	r3, [r0, #24]
 800621c:	b90b      	cbnz	r3, 8006222 <__swbuf_r+0x12>
 800621e:	f7ff fbbb 	bl	8005998 <__sinit>
 8006222:	4b21      	ldr	r3, [pc, #132]	; (80062a8 <__swbuf_r+0x98>)
 8006224:	429c      	cmp	r4, r3
 8006226:	d12b      	bne.n	8006280 <__swbuf_r+0x70>
 8006228:	686c      	ldr	r4, [r5, #4]
 800622a:	69a3      	ldr	r3, [r4, #24]
 800622c:	60a3      	str	r3, [r4, #8]
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	071a      	lsls	r2, r3, #28
 8006232:	d52f      	bpl.n	8006294 <__swbuf_r+0x84>
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	b36b      	cbz	r3, 8006294 <__swbuf_r+0x84>
 8006238:	6923      	ldr	r3, [r4, #16]
 800623a:	6820      	ldr	r0, [r4, #0]
 800623c:	1ac0      	subs	r0, r0, r3
 800623e:	6963      	ldr	r3, [r4, #20]
 8006240:	b2f6      	uxtb	r6, r6
 8006242:	4283      	cmp	r3, r0
 8006244:	4637      	mov	r7, r6
 8006246:	dc04      	bgt.n	8006252 <__swbuf_r+0x42>
 8006248:	4621      	mov	r1, r4
 800624a:	4628      	mov	r0, r5
 800624c:	f000 f948 	bl	80064e0 <_fflush_r>
 8006250:	bb30      	cbnz	r0, 80062a0 <__swbuf_r+0x90>
 8006252:	68a3      	ldr	r3, [r4, #8]
 8006254:	3b01      	subs	r3, #1
 8006256:	60a3      	str	r3, [r4, #8]
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	6022      	str	r2, [r4, #0]
 800625e:	701e      	strb	r6, [r3, #0]
 8006260:	6963      	ldr	r3, [r4, #20]
 8006262:	3001      	adds	r0, #1
 8006264:	4283      	cmp	r3, r0
 8006266:	d004      	beq.n	8006272 <__swbuf_r+0x62>
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	07db      	lsls	r3, r3, #31
 800626c:	d506      	bpl.n	800627c <__swbuf_r+0x6c>
 800626e:	2e0a      	cmp	r6, #10
 8006270:	d104      	bne.n	800627c <__swbuf_r+0x6c>
 8006272:	4621      	mov	r1, r4
 8006274:	4628      	mov	r0, r5
 8006276:	f000 f933 	bl	80064e0 <_fflush_r>
 800627a:	b988      	cbnz	r0, 80062a0 <__swbuf_r+0x90>
 800627c:	4638      	mov	r0, r7
 800627e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <__swbuf_r+0x9c>)
 8006282:	429c      	cmp	r4, r3
 8006284:	d101      	bne.n	800628a <__swbuf_r+0x7a>
 8006286:	68ac      	ldr	r4, [r5, #8]
 8006288:	e7cf      	b.n	800622a <__swbuf_r+0x1a>
 800628a:	4b09      	ldr	r3, [pc, #36]	; (80062b0 <__swbuf_r+0xa0>)
 800628c:	429c      	cmp	r4, r3
 800628e:	bf08      	it	eq
 8006290:	68ec      	ldreq	r4, [r5, #12]
 8006292:	e7ca      	b.n	800622a <__swbuf_r+0x1a>
 8006294:	4621      	mov	r1, r4
 8006296:	4628      	mov	r0, r5
 8006298:	f000 f81e 	bl	80062d8 <__swsetup_r>
 800629c:	2800      	cmp	r0, #0
 800629e:	d0cb      	beq.n	8006238 <__swbuf_r+0x28>
 80062a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80062a4:	e7ea      	b.n	800627c <__swbuf_r+0x6c>
 80062a6:	bf00      	nop
 80062a8:	080067f8 	.word	0x080067f8
 80062ac:	08006818 	.word	0x08006818
 80062b0:	080067d8 	.word	0x080067d8

080062b4 <_write_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4d07      	ldr	r5, [pc, #28]	; (80062d4 <_write_r+0x20>)
 80062b8:	4604      	mov	r4, r0
 80062ba:	4608      	mov	r0, r1
 80062bc:	4611      	mov	r1, r2
 80062be:	2200      	movs	r2, #0
 80062c0:	602a      	str	r2, [r5, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	f7fa fbf0 	bl	8000aa8 <_write>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_write_r+0x1e>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_write_r+0x1e>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	200001c4 	.word	0x200001c4

080062d8 <__swsetup_r>:
 80062d8:	4b32      	ldr	r3, [pc, #200]	; (80063a4 <__swsetup_r+0xcc>)
 80062da:	b570      	push	{r4, r5, r6, lr}
 80062dc:	681d      	ldr	r5, [r3, #0]
 80062de:	4606      	mov	r6, r0
 80062e0:	460c      	mov	r4, r1
 80062e2:	b125      	cbz	r5, 80062ee <__swsetup_r+0x16>
 80062e4:	69ab      	ldr	r3, [r5, #24]
 80062e6:	b913      	cbnz	r3, 80062ee <__swsetup_r+0x16>
 80062e8:	4628      	mov	r0, r5
 80062ea:	f7ff fb55 	bl	8005998 <__sinit>
 80062ee:	4b2e      	ldr	r3, [pc, #184]	; (80063a8 <__swsetup_r+0xd0>)
 80062f0:	429c      	cmp	r4, r3
 80062f2:	d10f      	bne.n	8006314 <__swsetup_r+0x3c>
 80062f4:	686c      	ldr	r4, [r5, #4]
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062fc:	0719      	lsls	r1, r3, #28
 80062fe:	d42c      	bmi.n	800635a <__swsetup_r+0x82>
 8006300:	06dd      	lsls	r5, r3, #27
 8006302:	d411      	bmi.n	8006328 <__swsetup_r+0x50>
 8006304:	2309      	movs	r3, #9
 8006306:	6033      	str	r3, [r6, #0]
 8006308:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800630c:	81a3      	strh	r3, [r4, #12]
 800630e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006312:	e03e      	b.n	8006392 <__swsetup_r+0xba>
 8006314:	4b25      	ldr	r3, [pc, #148]	; (80063ac <__swsetup_r+0xd4>)
 8006316:	429c      	cmp	r4, r3
 8006318:	d101      	bne.n	800631e <__swsetup_r+0x46>
 800631a:	68ac      	ldr	r4, [r5, #8]
 800631c:	e7eb      	b.n	80062f6 <__swsetup_r+0x1e>
 800631e:	4b24      	ldr	r3, [pc, #144]	; (80063b0 <__swsetup_r+0xd8>)
 8006320:	429c      	cmp	r4, r3
 8006322:	bf08      	it	eq
 8006324:	68ec      	ldreq	r4, [r5, #12]
 8006326:	e7e6      	b.n	80062f6 <__swsetup_r+0x1e>
 8006328:	0758      	lsls	r0, r3, #29
 800632a:	d512      	bpl.n	8006352 <__swsetup_r+0x7a>
 800632c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800632e:	b141      	cbz	r1, 8006342 <__swsetup_r+0x6a>
 8006330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006334:	4299      	cmp	r1, r3
 8006336:	d002      	beq.n	800633e <__swsetup_r+0x66>
 8006338:	4630      	mov	r0, r6
 800633a:	f000 f98f 	bl	800665c <_free_r>
 800633e:	2300      	movs	r3, #0
 8006340:	6363      	str	r3, [r4, #52]	; 0x34
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006348:	81a3      	strh	r3, [r4, #12]
 800634a:	2300      	movs	r3, #0
 800634c:	6063      	str	r3, [r4, #4]
 800634e:	6923      	ldr	r3, [r4, #16]
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	89a3      	ldrh	r3, [r4, #12]
 8006354:	f043 0308 	orr.w	r3, r3, #8
 8006358:	81a3      	strh	r3, [r4, #12]
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	b94b      	cbnz	r3, 8006372 <__swsetup_r+0x9a>
 800635e:	89a3      	ldrh	r3, [r4, #12]
 8006360:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006368:	d003      	beq.n	8006372 <__swsetup_r+0x9a>
 800636a:	4621      	mov	r1, r4
 800636c:	4630      	mov	r0, r6
 800636e:	f000 f929 	bl	80065c4 <__smakebuf_r>
 8006372:	89a0      	ldrh	r0, [r4, #12]
 8006374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006378:	f010 0301 	ands.w	r3, r0, #1
 800637c:	d00a      	beq.n	8006394 <__swsetup_r+0xbc>
 800637e:	2300      	movs	r3, #0
 8006380:	60a3      	str	r3, [r4, #8]
 8006382:	6963      	ldr	r3, [r4, #20]
 8006384:	425b      	negs	r3, r3
 8006386:	61a3      	str	r3, [r4, #24]
 8006388:	6923      	ldr	r3, [r4, #16]
 800638a:	b943      	cbnz	r3, 800639e <__swsetup_r+0xc6>
 800638c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006390:	d1ba      	bne.n	8006308 <__swsetup_r+0x30>
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	0781      	lsls	r1, r0, #30
 8006396:	bf58      	it	pl
 8006398:	6963      	ldrpl	r3, [r4, #20]
 800639a:	60a3      	str	r3, [r4, #8]
 800639c:	e7f4      	b.n	8006388 <__swsetup_r+0xb0>
 800639e:	2000      	movs	r0, #0
 80063a0:	e7f7      	b.n	8006392 <__swsetup_r+0xba>
 80063a2:	bf00      	nop
 80063a4:	2000000c 	.word	0x2000000c
 80063a8:	080067f8 	.word	0x080067f8
 80063ac:	08006818 	.word	0x08006818
 80063b0:	080067d8 	.word	0x080067d8

080063b4 <_close_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4d06      	ldr	r5, [pc, #24]	; (80063d0 <_close_r+0x1c>)
 80063b8:	2300      	movs	r3, #0
 80063ba:	4604      	mov	r4, r0
 80063bc:	4608      	mov	r0, r1
 80063be:	602b      	str	r3, [r5, #0]
 80063c0:	f7fa feeb 	bl	800119a <_close>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d102      	bne.n	80063ce <_close_r+0x1a>
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	b103      	cbz	r3, 80063ce <_close_r+0x1a>
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	200001c4 	.word	0x200001c4

080063d4 <__sflush_r>:
 80063d4:	898a      	ldrh	r2, [r1, #12]
 80063d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063da:	4605      	mov	r5, r0
 80063dc:	0710      	lsls	r0, r2, #28
 80063de:	460c      	mov	r4, r1
 80063e0:	d458      	bmi.n	8006494 <__sflush_r+0xc0>
 80063e2:	684b      	ldr	r3, [r1, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	dc05      	bgt.n	80063f4 <__sflush_r+0x20>
 80063e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	dc02      	bgt.n	80063f4 <__sflush_r+0x20>
 80063ee:	2000      	movs	r0, #0
 80063f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063f6:	2e00      	cmp	r6, #0
 80063f8:	d0f9      	beq.n	80063ee <__sflush_r+0x1a>
 80063fa:	2300      	movs	r3, #0
 80063fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006400:	682f      	ldr	r7, [r5, #0]
 8006402:	602b      	str	r3, [r5, #0]
 8006404:	d032      	beq.n	800646c <__sflush_r+0x98>
 8006406:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	075a      	lsls	r2, r3, #29
 800640c:	d505      	bpl.n	800641a <__sflush_r+0x46>
 800640e:	6863      	ldr	r3, [r4, #4]
 8006410:	1ac0      	subs	r0, r0, r3
 8006412:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006414:	b10b      	cbz	r3, 800641a <__sflush_r+0x46>
 8006416:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006418:	1ac0      	subs	r0, r0, r3
 800641a:	2300      	movs	r3, #0
 800641c:	4602      	mov	r2, r0
 800641e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006420:	6a21      	ldr	r1, [r4, #32]
 8006422:	4628      	mov	r0, r5
 8006424:	47b0      	blx	r6
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	d106      	bne.n	800643a <__sflush_r+0x66>
 800642c:	6829      	ldr	r1, [r5, #0]
 800642e:	291d      	cmp	r1, #29
 8006430:	d82c      	bhi.n	800648c <__sflush_r+0xb8>
 8006432:	4a2a      	ldr	r2, [pc, #168]	; (80064dc <__sflush_r+0x108>)
 8006434:	40ca      	lsrs	r2, r1
 8006436:	07d6      	lsls	r6, r2, #31
 8006438:	d528      	bpl.n	800648c <__sflush_r+0xb8>
 800643a:	2200      	movs	r2, #0
 800643c:	6062      	str	r2, [r4, #4]
 800643e:	04d9      	lsls	r1, r3, #19
 8006440:	6922      	ldr	r2, [r4, #16]
 8006442:	6022      	str	r2, [r4, #0]
 8006444:	d504      	bpl.n	8006450 <__sflush_r+0x7c>
 8006446:	1c42      	adds	r2, r0, #1
 8006448:	d101      	bne.n	800644e <__sflush_r+0x7a>
 800644a:	682b      	ldr	r3, [r5, #0]
 800644c:	b903      	cbnz	r3, 8006450 <__sflush_r+0x7c>
 800644e:	6560      	str	r0, [r4, #84]	; 0x54
 8006450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006452:	602f      	str	r7, [r5, #0]
 8006454:	2900      	cmp	r1, #0
 8006456:	d0ca      	beq.n	80063ee <__sflush_r+0x1a>
 8006458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800645c:	4299      	cmp	r1, r3
 800645e:	d002      	beq.n	8006466 <__sflush_r+0x92>
 8006460:	4628      	mov	r0, r5
 8006462:	f000 f8fb 	bl	800665c <_free_r>
 8006466:	2000      	movs	r0, #0
 8006468:	6360      	str	r0, [r4, #52]	; 0x34
 800646a:	e7c1      	b.n	80063f0 <__sflush_r+0x1c>
 800646c:	6a21      	ldr	r1, [r4, #32]
 800646e:	2301      	movs	r3, #1
 8006470:	4628      	mov	r0, r5
 8006472:	47b0      	blx	r6
 8006474:	1c41      	adds	r1, r0, #1
 8006476:	d1c7      	bne.n	8006408 <__sflush_r+0x34>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0c4      	beq.n	8006408 <__sflush_r+0x34>
 800647e:	2b1d      	cmp	r3, #29
 8006480:	d001      	beq.n	8006486 <__sflush_r+0xb2>
 8006482:	2b16      	cmp	r3, #22
 8006484:	d101      	bne.n	800648a <__sflush_r+0xb6>
 8006486:	602f      	str	r7, [r5, #0]
 8006488:	e7b1      	b.n	80063ee <__sflush_r+0x1a>
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	e7ad      	b.n	80063f0 <__sflush_r+0x1c>
 8006494:	690f      	ldr	r7, [r1, #16]
 8006496:	2f00      	cmp	r7, #0
 8006498:	d0a9      	beq.n	80063ee <__sflush_r+0x1a>
 800649a:	0793      	lsls	r3, r2, #30
 800649c:	680e      	ldr	r6, [r1, #0]
 800649e:	bf08      	it	eq
 80064a0:	694b      	ldreq	r3, [r1, #20]
 80064a2:	600f      	str	r7, [r1, #0]
 80064a4:	bf18      	it	ne
 80064a6:	2300      	movne	r3, #0
 80064a8:	eba6 0807 	sub.w	r8, r6, r7
 80064ac:	608b      	str	r3, [r1, #8]
 80064ae:	f1b8 0f00 	cmp.w	r8, #0
 80064b2:	dd9c      	ble.n	80063ee <__sflush_r+0x1a>
 80064b4:	6a21      	ldr	r1, [r4, #32]
 80064b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064b8:	4643      	mov	r3, r8
 80064ba:	463a      	mov	r2, r7
 80064bc:	4628      	mov	r0, r5
 80064be:	47b0      	blx	r6
 80064c0:	2800      	cmp	r0, #0
 80064c2:	dc06      	bgt.n	80064d2 <__sflush_r+0xfe>
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064d0:	e78e      	b.n	80063f0 <__sflush_r+0x1c>
 80064d2:	4407      	add	r7, r0
 80064d4:	eba8 0800 	sub.w	r8, r8, r0
 80064d8:	e7e9      	b.n	80064ae <__sflush_r+0xda>
 80064da:	bf00      	nop
 80064dc:	20400001 	.word	0x20400001

080064e0 <_fflush_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	690b      	ldr	r3, [r1, #16]
 80064e4:	4605      	mov	r5, r0
 80064e6:	460c      	mov	r4, r1
 80064e8:	b913      	cbnz	r3, 80064f0 <_fflush_r+0x10>
 80064ea:	2500      	movs	r5, #0
 80064ec:	4628      	mov	r0, r5
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	b118      	cbz	r0, 80064fa <_fflush_r+0x1a>
 80064f2:	6983      	ldr	r3, [r0, #24]
 80064f4:	b90b      	cbnz	r3, 80064fa <_fflush_r+0x1a>
 80064f6:	f7ff fa4f 	bl	8005998 <__sinit>
 80064fa:	4b14      	ldr	r3, [pc, #80]	; (800654c <_fflush_r+0x6c>)
 80064fc:	429c      	cmp	r4, r3
 80064fe:	d11b      	bne.n	8006538 <_fflush_r+0x58>
 8006500:	686c      	ldr	r4, [r5, #4]
 8006502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0ef      	beq.n	80064ea <_fflush_r+0xa>
 800650a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800650c:	07d0      	lsls	r0, r2, #31
 800650e:	d404      	bmi.n	800651a <_fflush_r+0x3a>
 8006510:	0599      	lsls	r1, r3, #22
 8006512:	d402      	bmi.n	800651a <_fflush_r+0x3a>
 8006514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006516:	f7ff fadd 	bl	8005ad4 <__retarget_lock_acquire_recursive>
 800651a:	4628      	mov	r0, r5
 800651c:	4621      	mov	r1, r4
 800651e:	f7ff ff59 	bl	80063d4 <__sflush_r>
 8006522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006524:	07da      	lsls	r2, r3, #31
 8006526:	4605      	mov	r5, r0
 8006528:	d4e0      	bmi.n	80064ec <_fflush_r+0xc>
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	059b      	lsls	r3, r3, #22
 800652e:	d4dd      	bmi.n	80064ec <_fflush_r+0xc>
 8006530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006532:	f7ff fad0 	bl	8005ad6 <__retarget_lock_release_recursive>
 8006536:	e7d9      	b.n	80064ec <_fflush_r+0xc>
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <_fflush_r+0x70>)
 800653a:	429c      	cmp	r4, r3
 800653c:	d101      	bne.n	8006542 <_fflush_r+0x62>
 800653e:	68ac      	ldr	r4, [r5, #8]
 8006540:	e7df      	b.n	8006502 <_fflush_r+0x22>
 8006542:	4b04      	ldr	r3, [pc, #16]	; (8006554 <_fflush_r+0x74>)
 8006544:	429c      	cmp	r4, r3
 8006546:	bf08      	it	eq
 8006548:	68ec      	ldreq	r4, [r5, #12]
 800654a:	e7da      	b.n	8006502 <_fflush_r+0x22>
 800654c:	080067f8 	.word	0x080067f8
 8006550:	08006818 	.word	0x08006818
 8006554:	080067d8 	.word	0x080067d8

08006558 <_lseek_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4d07      	ldr	r5, [pc, #28]	; (8006578 <_lseek_r+0x20>)
 800655c:	4604      	mov	r4, r0
 800655e:	4608      	mov	r0, r1
 8006560:	4611      	mov	r1, r2
 8006562:	2200      	movs	r2, #0
 8006564:	602a      	str	r2, [r5, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	f7fa fe3e 	bl	80011e8 <_lseek>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_lseek_r+0x1e>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_lseek_r+0x1e>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	200001c4 	.word	0x200001c4

0800657c <__swhatbuf_r>:
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	460e      	mov	r6, r1
 8006580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006584:	2900      	cmp	r1, #0
 8006586:	b096      	sub	sp, #88	; 0x58
 8006588:	4614      	mov	r4, r2
 800658a:	461d      	mov	r5, r3
 800658c:	da07      	bge.n	800659e <__swhatbuf_r+0x22>
 800658e:	2300      	movs	r3, #0
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	89b3      	ldrh	r3, [r6, #12]
 8006594:	061a      	lsls	r2, r3, #24
 8006596:	d410      	bmi.n	80065ba <__swhatbuf_r+0x3e>
 8006598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800659c:	e00e      	b.n	80065bc <__swhatbuf_r+0x40>
 800659e:	466a      	mov	r2, sp
 80065a0:	f000 f8be 	bl	8006720 <_fstat_r>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	dbf2      	blt.n	800658e <__swhatbuf_r+0x12>
 80065a8:	9a01      	ldr	r2, [sp, #4]
 80065aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065b2:	425a      	negs	r2, r3
 80065b4:	415a      	adcs	r2, r3
 80065b6:	602a      	str	r2, [r5, #0]
 80065b8:	e7ee      	b.n	8006598 <__swhatbuf_r+0x1c>
 80065ba:	2340      	movs	r3, #64	; 0x40
 80065bc:	2000      	movs	r0, #0
 80065be:	6023      	str	r3, [r4, #0]
 80065c0:	b016      	add	sp, #88	; 0x58
 80065c2:	bd70      	pop	{r4, r5, r6, pc}

080065c4 <__smakebuf_r>:
 80065c4:	898b      	ldrh	r3, [r1, #12]
 80065c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065c8:	079d      	lsls	r5, r3, #30
 80065ca:	4606      	mov	r6, r0
 80065cc:	460c      	mov	r4, r1
 80065ce:	d507      	bpl.n	80065e0 <__smakebuf_r+0x1c>
 80065d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	6123      	str	r3, [r4, #16]
 80065d8:	2301      	movs	r3, #1
 80065da:	6163      	str	r3, [r4, #20]
 80065dc:	b002      	add	sp, #8
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	ab01      	add	r3, sp, #4
 80065e2:	466a      	mov	r2, sp
 80065e4:	f7ff ffca 	bl	800657c <__swhatbuf_r>
 80065e8:	9900      	ldr	r1, [sp, #0]
 80065ea:	4605      	mov	r5, r0
 80065ec:	4630      	mov	r0, r6
 80065ee:	f7ff fa73 	bl	8005ad8 <_malloc_r>
 80065f2:	b948      	cbnz	r0, 8006608 <__smakebuf_r+0x44>
 80065f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f8:	059a      	lsls	r2, r3, #22
 80065fa:	d4ef      	bmi.n	80065dc <__smakebuf_r+0x18>
 80065fc:	f023 0303 	bic.w	r3, r3, #3
 8006600:	f043 0302 	orr.w	r3, r3, #2
 8006604:	81a3      	strh	r3, [r4, #12]
 8006606:	e7e3      	b.n	80065d0 <__smakebuf_r+0xc>
 8006608:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <__smakebuf_r+0x7c>)
 800660a:	62b3      	str	r3, [r6, #40]	; 0x28
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	6020      	str	r0, [r4, #0]
 8006610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006614:	81a3      	strh	r3, [r4, #12]
 8006616:	9b00      	ldr	r3, [sp, #0]
 8006618:	6163      	str	r3, [r4, #20]
 800661a:	9b01      	ldr	r3, [sp, #4]
 800661c:	6120      	str	r0, [r4, #16]
 800661e:	b15b      	cbz	r3, 8006638 <__smakebuf_r+0x74>
 8006620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006624:	4630      	mov	r0, r6
 8006626:	f000 f88d 	bl	8006744 <_isatty_r>
 800662a:	b128      	cbz	r0, 8006638 <__smakebuf_r+0x74>
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	f043 0301 	orr.w	r3, r3, #1
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	89a0      	ldrh	r0, [r4, #12]
 800663a:	4305      	orrs	r5, r0
 800663c:	81a5      	strh	r5, [r4, #12]
 800663e:	e7cd      	b.n	80065dc <__smakebuf_r+0x18>
 8006640:	08005931 	.word	0x08005931

08006644 <__malloc_lock>:
 8006644:	4801      	ldr	r0, [pc, #4]	; (800664c <__malloc_lock+0x8>)
 8006646:	f7ff ba45 	b.w	8005ad4 <__retarget_lock_acquire_recursive>
 800664a:	bf00      	nop
 800664c:	200001bc 	.word	0x200001bc

08006650 <__malloc_unlock>:
 8006650:	4801      	ldr	r0, [pc, #4]	; (8006658 <__malloc_unlock+0x8>)
 8006652:	f7ff ba40 	b.w	8005ad6 <__retarget_lock_release_recursive>
 8006656:	bf00      	nop
 8006658:	200001bc 	.word	0x200001bc

0800665c <_free_r>:
 800665c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800665e:	2900      	cmp	r1, #0
 8006660:	d048      	beq.n	80066f4 <_free_r+0x98>
 8006662:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006666:	9001      	str	r0, [sp, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	f1a1 0404 	sub.w	r4, r1, #4
 800666e:	bfb8      	it	lt
 8006670:	18e4      	addlt	r4, r4, r3
 8006672:	f7ff ffe7 	bl	8006644 <__malloc_lock>
 8006676:	4a20      	ldr	r2, [pc, #128]	; (80066f8 <_free_r+0x9c>)
 8006678:	9801      	ldr	r0, [sp, #4]
 800667a:	6813      	ldr	r3, [r2, #0]
 800667c:	4615      	mov	r5, r2
 800667e:	b933      	cbnz	r3, 800668e <_free_r+0x32>
 8006680:	6063      	str	r3, [r4, #4]
 8006682:	6014      	str	r4, [r2, #0]
 8006684:	b003      	add	sp, #12
 8006686:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800668a:	f7ff bfe1 	b.w	8006650 <__malloc_unlock>
 800668e:	42a3      	cmp	r3, r4
 8006690:	d90b      	bls.n	80066aa <_free_r+0x4e>
 8006692:	6821      	ldr	r1, [r4, #0]
 8006694:	1862      	adds	r2, r4, r1
 8006696:	4293      	cmp	r3, r2
 8006698:	bf04      	itt	eq
 800669a:	681a      	ldreq	r2, [r3, #0]
 800669c:	685b      	ldreq	r3, [r3, #4]
 800669e:	6063      	str	r3, [r4, #4]
 80066a0:	bf04      	itt	eq
 80066a2:	1852      	addeq	r2, r2, r1
 80066a4:	6022      	streq	r2, [r4, #0]
 80066a6:	602c      	str	r4, [r5, #0]
 80066a8:	e7ec      	b.n	8006684 <_free_r+0x28>
 80066aa:	461a      	mov	r2, r3
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	b10b      	cbz	r3, 80066b4 <_free_r+0x58>
 80066b0:	42a3      	cmp	r3, r4
 80066b2:	d9fa      	bls.n	80066aa <_free_r+0x4e>
 80066b4:	6811      	ldr	r1, [r2, #0]
 80066b6:	1855      	adds	r5, r2, r1
 80066b8:	42a5      	cmp	r5, r4
 80066ba:	d10b      	bne.n	80066d4 <_free_r+0x78>
 80066bc:	6824      	ldr	r4, [r4, #0]
 80066be:	4421      	add	r1, r4
 80066c0:	1854      	adds	r4, r2, r1
 80066c2:	42a3      	cmp	r3, r4
 80066c4:	6011      	str	r1, [r2, #0]
 80066c6:	d1dd      	bne.n	8006684 <_free_r+0x28>
 80066c8:	681c      	ldr	r4, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	6053      	str	r3, [r2, #4]
 80066ce:	4421      	add	r1, r4
 80066d0:	6011      	str	r1, [r2, #0]
 80066d2:	e7d7      	b.n	8006684 <_free_r+0x28>
 80066d4:	d902      	bls.n	80066dc <_free_r+0x80>
 80066d6:	230c      	movs	r3, #12
 80066d8:	6003      	str	r3, [r0, #0]
 80066da:	e7d3      	b.n	8006684 <_free_r+0x28>
 80066dc:	6825      	ldr	r5, [r4, #0]
 80066de:	1961      	adds	r1, r4, r5
 80066e0:	428b      	cmp	r3, r1
 80066e2:	bf04      	itt	eq
 80066e4:	6819      	ldreq	r1, [r3, #0]
 80066e6:	685b      	ldreq	r3, [r3, #4]
 80066e8:	6063      	str	r3, [r4, #4]
 80066ea:	bf04      	itt	eq
 80066ec:	1949      	addeq	r1, r1, r5
 80066ee:	6021      	streq	r1, [r4, #0]
 80066f0:	6054      	str	r4, [r2, #4]
 80066f2:	e7c7      	b.n	8006684 <_free_r+0x28>
 80066f4:	b003      	add	sp, #12
 80066f6:	bd30      	pop	{r4, r5, pc}
 80066f8:	20000090 	.word	0x20000090

080066fc <_read_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d07      	ldr	r5, [pc, #28]	; (800671c <_read_r+0x20>)
 8006700:	4604      	mov	r4, r0
 8006702:	4608      	mov	r0, r1
 8006704:	4611      	mov	r1, r2
 8006706:	2200      	movs	r2, #0
 8006708:	602a      	str	r2, [r5, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f7fa fd28 	bl	8001160 <_read>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_read_r+0x1e>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_read_r+0x1e>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	200001c4 	.word	0x200001c4

08006720 <_fstat_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	4d07      	ldr	r5, [pc, #28]	; (8006740 <_fstat_r+0x20>)
 8006724:	2300      	movs	r3, #0
 8006726:	4604      	mov	r4, r0
 8006728:	4608      	mov	r0, r1
 800672a:	4611      	mov	r1, r2
 800672c:	602b      	str	r3, [r5, #0]
 800672e:	f7fa fd40 	bl	80011b2 <_fstat>
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	d102      	bne.n	800673c <_fstat_r+0x1c>
 8006736:	682b      	ldr	r3, [r5, #0]
 8006738:	b103      	cbz	r3, 800673c <_fstat_r+0x1c>
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	bd38      	pop	{r3, r4, r5, pc}
 800673e:	bf00      	nop
 8006740:	200001c4 	.word	0x200001c4

08006744 <_isatty_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	4d06      	ldr	r5, [pc, #24]	; (8006760 <_isatty_r+0x1c>)
 8006748:	2300      	movs	r3, #0
 800674a:	4604      	mov	r4, r0
 800674c:	4608      	mov	r0, r1
 800674e:	602b      	str	r3, [r5, #0]
 8006750:	f7fa fd3f 	bl	80011d2 <_isatty>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_isatty_r+0x1a>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b103      	cbz	r3, 800675e <_isatty_r+0x1a>
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	200001c4 	.word	0x200001c4

08006764 <_init>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	bf00      	nop
 8006768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676a:	bc08      	pop	{r3}
 800676c:	469e      	mov	lr, r3
 800676e:	4770      	bx	lr

08006770 <_fini>:
 8006770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006772:	bf00      	nop
 8006774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006776:	bc08      	pop	{r3}
 8006778:	469e      	mov	lr, r3
 800677a:	4770      	bx	lr
